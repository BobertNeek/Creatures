{
  "ABBA": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "ABBA (integer) Returns the absolute base for the current agent/part. Returns -1 if an invalid part. The absolute base is the value passed into NEW: SIMP and so on, it is different from the BASE.",
    "sources": [
      "cdn://caos.html#ABBA"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "ABSV": {
    "args": [
      "variable"
    ],
    "kinds": [
      "command"
    ],
    "description": "ABSV (command) var (variable) Makes a variable positive (its absolute value), so if var is negative var = 0 - var, otherwise var is left alone.",
    "sources": [
      "cdn://caos.html#ABSV"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "variable"
      ]
    }
  },
  "ACCG": {
    "args": [
      "accel (float)"
    ],
    "returns": "float",
    "description": "Set or get gravity acceleration (px/tick^2)",
    "notes": "Affects how fast agents fall. E.g., ACCG 1.0 is normal gravity",
    "kinds": [
      "command",
      "reporter"
    ],
    "sources": [
      "cdn://caos.html#ACCG"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "accel (float)"
      ]
    }
  },
  "ACOS": {
    "returns": "float",
    "kinds": [
      "reporter"
    ],
    "description": "ACOS (float) x (float) Returns arccosine of x in degrees.",
    "sources": [
      "cdn://caos.html#ACOS"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "ADDB": {
    "args": [
      "integer",
      "string"
    ],
    "kinds": [
      "command"
    ],
    "description": "ADDB (command) metaroom_id (integer) background_file (string) Add a new background to the given metaroom. Use BKGD to change the current displayed background.",
    "sources": [
      "cdn://caos.html#ADDB"
    ],
    "validation": {
      "arity": 2,
      "types": [
        "integer",
        "string"
      ]
    }
  },
  "ADDM": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "ADDM (integer) x (integer) y (integer) width (integer) height (integer) background (string) Creates a new metaroom with the given coordinates. Specifies the starting background file. Returns the id of the new metaroom.",
    "sources": [
      "cdn://caos.html#ADDM"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "ADDR": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "ADDR (integer) metaroom_id (integer) x_left (integer) x_right (integer) y_left_ceiling (integer) y_right_ceiling (integer) y_left_floor (integer) y_right_floor (integer) Creates a new room within a metaroom. Rooms have vertical left and right walls, but potentially sloped floors and ceilings. The coordinates specify the exact shape. Returns the id of the new room.",
    "sources": [
      "cdn://caos.html#ADDR"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "ADDS": {
    "args": [
      "variable",
      "string"
    ],
    "kinds": [
      "command"
    ],
    "description": "ADDS (command) var (variable) append (string) Concatenates two strings, so var = var + append.",
    "sources": [
      "cdn://caos.html#ADDS"
    ],
    "validation": {
      "arity": 2,
      "types": [
        "variable",
        "string"
      ]
    }
  },
  "ADDV": {
    "args": [
      "variable",
      "decimal"
    ],
    "kinds": [
      "command"
    ],
    "description": "ADDV (command) var (variable) sum (decimal) Adds two integers or floats, so var = var + sum.",
    "sources": [
      "cdn://caos.html#ADDV"
    ],
    "validation": {
      "arity": 2,
      "types": [
        "variable",
        "decimal"
      ]
    }
  },
  "ADIN": {
    "args": [
      "integer",
      "integer",
      "float",
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "ADIN (command) verb (integer) noun (integer) qualifier (float) drive (integer) Add an instinct to the creature's brain queue. (The instinct is not processed immediately). Example: ADIN 3 4 0.5 7 encourages (by a factor of 0.5) the creature to do action 3 on category 4 when drive 7 is high.",
    "sources": [
      "cdn://caos.html#ADIN"
    ],
    "validation": {
      "arity": 4,
      "types": [
        "integer",
        "integer",
        "float",
        "integer"
      ]
    }
  },
  "ADMP": {
    "args": [
      "float"
    ],
    "returns": "float",
    "kinds": [
      "command",
      "reporter"
    ],
    "description": "ADMP (float) Get current angular damping. The value is from 0.0 to 1.0 where 0.0 means no damping, 1.0 maximum.",
    "sources": [
      "cdn://caos.html#ADMP"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "float"
      ]
    }
  },
  "AERO": {
    "args": [
      "integer"
    ],
    "returns": "integer",
    "kinds": [
      "command",
      "reporter"
    ],
    "description": "AERO (integer) Returns aerodynamic factor as a percentage.",
    "sources": [
      "cdn://caos.html#AERO"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "integer"
      ]
    }
  },
  "AGES": {
    "args": [
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "AGES (command) times (integer) Forces a creature to age the given number of times. See also CAGE.",
    "sources": [
      "cdn://caos.html#AGES"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "integer"
      ]
    }
  },
  "AGNT": {
    "returns": "agent",
    "kinds": [
      "reporter"
    ],
    "description": "AGNT (agent) unique_id (integer) Given a unique identifier, returns the corresponding agent. Returns NULL if the agent no longer exists. UNID extracts the unique id. NOTE: This should only be used for external programs to persistently refer to an agent during a session. Variables can use SETA to store agent r-values directly for internal use. Unique identifiers can change across saved sessions.",
    "sources": [
      "cdn://caos.html#AGNT"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "ALPH": {
    "args": [
      "integer",
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "ALPH (command) alpha_value (integer) yesOrNo (integer) The agent will be drawn alpha blended against the background by the given value - from 256 for invisible to 0 for completely solid. For compound agents set the PART to affect a particular part or to -1 to affect all parts. The second parameter switches alpha blending on (1) or off (0). Alpha graphics are drawn much slower, so use sparingly and turn it off completely rather than using an intensity value of 0 or 256. At the moment alpha channels only work on compressed, non-mirrored, non-zoomed sprites.",
    "sources": [
      "cdn://caos.html#ALPH"
    ],
    "validation": {
      "arity": 2,
      "types": [
        "integer",
        "integer"
      ]
    }
  },
  "ALTR": {
    "args": [
      "integer",
      "integer",
      "float"
    ],
    "kinds": [
      "command"
    ],
    "description": "ALTR (command) room_id (integer) ca_index (integer) ca_delta (float) Directly adjusts the level of a CA in a room. Specify an identifier of -1 to use the room of the midpoint of the target agent.",
    "sources": [
      "cdn://caos.html#ALTR"
    ],
    "validation": {
      "arity": 3,
      "types": [
        "integer",
        "integer",
        "float"
      ]
    }
  },
  "ANDV": {
    "args": [
      "variable",
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "ANDV (command) var (variable) value (integer) Peform a bitwise AND on an integer variable, so var = var & value.",
    "sources": [
      "cdn://caos.html#ANDV"
    ],
    "validation": {
      "arity": 2,
      "types": [
        "variable",
        "integer"
      ]
    }
  },
  "ANGL": {
    "returns": "float",
    "kinds": [
      "reporter"
    ],
    "description": "ANGL (float) x (float) y (float) Gets the angle (as a fraction of a circle) from TARG's position to the position specified.",
    "sources": [
      "cdn://caos.html#ANGL"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "ANIM": {
    "args": [
      "byte-string"
    ],
    "kinds": [
      "command"
    ],
    "description": "ANIM (command) pose_list (byte-string) Specify a list of POSEs such as [1 2 3] to animate the current agent/part. Put 255 at the end to continually loop. The first number after the 255 is an index into the animation string where the looping restarts from - this defaults to 0 if not specified. e.g. [0 1 2 10 11 12 255 3] would loop just the 10, 11, 12 section.",
    "sources": [
      "cdn://caos.html#ANIM"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "byte-string"
      ]
    }
  },
  "ANMS": {
    "args": [
      "string"
    ],
    "kinds": [
      "command"
    ],
    "description": "ANMS (command) anim_string (string) This is like ANIM, only it reads the poses from a string such as \"3 4 5 255\". Use this when you need to dynamically construct animations. Use ANIM in general as it is quicker to execute, although they are the same speed once the animation is underway.",
    "sources": [
      "cdn://caos.html#ANMS"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "string"
      ]
    }
  },
  "APPR": {
    "kinds": [
      "command"
    ],
    "description": "APPR (command) Creature approaches the IT agent. If there is no IT agent, the creature follows the CA smell to find an agent of that category. The script resumes when it gets there, or if it can't get any further.",
    "sources": [
      "cdn://caos.html#APPR"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "APRO": {
    "args": [
      "string"
    ],
    "kinds": [
      "command"
    ],
    "description": "APRO (command) search_text (string) Lists all command names whose help contains the text.",
    "sources": [
      "cdn://caos.html#APRO"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "string"
      ]
    }
  },
  "ASIN": {
    "returns": "float",
    "kinds": [
      "reporter"
    ],
    "description": "ASIN (float) x (float) Returns arcsine of x in degrees.",
    "sources": [
      "cdn://caos.html#ASIN"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "ASLP": {
    "args": [
      "integer"
    ],
    "returns": "integer",
    "kinds": [
      "command",
      "reporter"
    ],
    "description": "ASLP (integer) Returns 1 if the creature is asleep, 0 otherwise.",
    "sources": [
      "cdn://caos.html#ASLP"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "integer"
      ]
    }
  },
  "ATAN": {
    "returns": "float",
    "kinds": [
      "reporter"
    ],
    "description": "ATAN (float) x (float) Returns arctangent of x in degrees.",
    "sources": [
      "cdn://caos.html#ATAN"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "ATTN": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "ATTN (integer) Returns the current focus of attention id.",
    "sources": [
      "cdn://caos.html#ATTN"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "ATTR": {
    "args": [
      "integer"
    ],
    "returns": "integer",
    "kinds": [
      "command",
      "reporter"
    ],
    "description": "ATTR (integer) Return attributes of target.",
    "sources": [
      "cdn://caos.html#ATTR"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "integer"
      ]
    }
  },
  "AVAR": {
    "returns": "variable",
    "kinds": [
      "reporter"
    ],
    "description": "AVAR (variable) agent (agent) index (integer) This is the OVnn variable of the agent passed in. It is equivalent to target agent, OVnn, but means that you don't need to target it first :) You can also use them to implement primitive arrays.",
    "sources": [
      "cdn://caos.html#AVAR"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "AVEL": {
    "args": [
      "float"
    ],
    "returns": "float",
    "kinds": [
      "command",
      "reporter"
    ],
    "description": "AVEL (float) Get current angular velocity.",
    "sources": [
      "cdn://caos.html#AVEL"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "float"
      ]
    }
  },
  "BANG": {
    "kinds": [
      "command"
    ],
    "description": "BANG (command) Causes a division by zero exception in the processor, to test the engine's error handling routines.",
    "sources": [
      "cdn://caos.html#BANG"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "BASE": {
    "args": [
      "integer"
    ],
    "returns": "integer",
    "kinds": [
      "command",
      "reporter"
    ],
    "description": "BASE (integer) Returns the BASE image for the current agent/part. Returns -1 if an invalid part.",
    "sources": [
      "cdn://caos.html#BASE"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "integer"
      ]
    }
  },
  "BHVR": {
    "args": [
      "integer"
    ],
    "returns": "integer",
    "kinds": [
      "command",
      "reporter"
    ],
    "description": "BHVR (integer) Returns the creature permissions for the target agent.",
    "sources": [
      "cdn://caos.html#BHVR"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "integer"
      ]
    }
  },
  "BKDS": {
    "returns": "string",
    "kinds": [
      "reporter"
    ],
    "description": "BKDS (string) metaroom_id (integer) Returns a string containing all the background names for the specified metaroom in a comma seperated list.",
    "sources": [
      "cdn://caos.html#BKDS"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "BKGD": {
    "args": [
      "integer",
      "string",
      "integer"
    ],
    "returns": "string",
    "kinds": [
      "command",
      "reporter"
    ],
    "description": "BKGD (string) metaroom_id (integer) Returns the name of the background file currently shown by the given camera.",
    "sources": [
      "cdn://caos.html#BKGD"
    ],
    "validation": {
      "arity": 3,
      "types": [
        "integer",
        "string",
        "integer"
      ]
    }
  },
  "BODY": {
    "args": [
      "integer",
      "integer"
    ],
    "returns": "integer",
    "kinds": [
      "command",
      "reporter"
    ],
    "description": "BODY (command) set_number (integer) layer (integer) Similar to WEAR, only puts the given set of clothes on every body part.",
    "sources": [
      "cdn://caos.html#BODY"
    ],
    "validation": {
      "arity": 2,
      "types": [
        "integer",
        "integer"
      ]
    }
  },
  "BOOT": {
    "args": [
      "integer",
      "integer",
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "BOOT (command) subboot_number (integer) folder_number_sum (integer) clear_world (integer) Loads in a list of numbered bootstrap folders contained within a folder called subboot. Bootstraps folders numbers are powers of 2, sum the folder numbers to load those folders. There is provision for more than one subboot folder, these should be uniquely numbered.",
    "sources": [
      "cdn://caos.html#BOOT"
    ],
    "validation": {
      "arity": 3,
      "types": [
        "integer",
        "integer",
        "integer"
      ]
    }
  },
  "BORN": {
    "kinds": [
      "command"
    ],
    "description": "BORN (command) Signals the target creature as having been born - this sends a birth event, and sets the TAGE ticking.",
    "sources": [
      "cdn://caos.html#BORN"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "BRMI": {
    "args": [
      "integer",
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "BRMI (command) metaroom_base, (integer) room_base (integer) Sets the Map's Metaroom and Room index bases for adding new rooms/metarooms.",
    "sources": [
      "cdn://caos.html#BRMI"
    ],
    "validation": {
      "arity": 2,
      "types": [
        "integer",
        "integer"
      ]
    }
  },
  "BRN: DMPB": {
    "kinds": [
      "command"
    ],
    "description": "BRN: DMPB (command) Dumps the sizes of the binary data dumps for current lobes and tracts.",
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "BRN: DMPD": {
    "args": [
      "integer",
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "BRN: DMPD (command) tract_number (integer) dendrite_number (integer) Dumps a dendrite as binary data.",
    "validation": {
      "arity": 2,
      "types": [
        "integer",
        "integer"
      ]
    }
  },
  "BRN: DMPL": {
    "args": [
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "BRN: DMPL (command) lobe_number (integer) Dumps a lobe as binary data.",
    "validation": {
      "arity": 1,
      "types": [
        "integer"
      ]
    }
  },
  "BRN: DMPN": {
    "args": [
      "integer",
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "BRN: DMPN (command) lobe_number (integer) neuron_number (integer) Dumps a neuron as binary data.",
    "validation": {
      "arity": 2,
      "types": [
        "integer",
        "integer"
      ]
    }
  },
  "BRN: DMPT": {
    "args": [
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "BRN: DMPT (command) tract_number (integer) Dumps a tract as binary data.",
    "validation": {
      "arity": 1,
      "types": [
        "integer"
      ]
    }
  },
  "BRN: SETD": {
    "args": [
      "integer",
      "integer",
      "integer",
      "float"
    ],
    "kinds": [
      "command"
    ],
    "description": "BRN: SETD (command) tract_number (integer) dendrite_number (integer) weight_number (integer) new_value (float) Sets a dendrite weight.",
    "validation": {
      "arity": 4,
      "types": [
        "integer",
        "integer",
        "integer",
        "float"
      ]
    }
  },
  "BRN: SETL": {
    "args": [
      "integer",
      "integer",
      "float"
    ],
    "kinds": [
      "command"
    ],
    "description": "BRN: SETL (command) lobe_number (integer) line_number (integer) new_value (float) Sets a lobe's SV rule float value.",
    "validation": {
      "arity": 3,
      "types": [
        "integer",
        "integer",
        "float"
      ]
    }
  },
  "BRN: SETN": {
    "args": [
      "integer",
      "integer",
      "integer",
      "float"
    ],
    "kinds": [
      "command"
    ],
    "description": "BRN: SETN (command) lobe_number (integer) neuron_number (integer) state_number (integer) new_value (float) Sets a neuron weight.",
    "validation": {
      "arity": 4,
      "types": [
        "integer",
        "integer",
        "integer",
        "float"
      ]
    }
  },
  "BRN: SETT": {
    "args": [
      "integer",
      "integer",
      "float"
    ],
    "kinds": [
      "command"
    ],
    "description": "BRN: SETT (command) tract_number (integer) line_number (integer) new_value (float) Sets a tract's SV rule float value.",
    "validation": {
      "arity": 3,
      "types": [
        "integer",
        "integer",
        "float"
      ]
    }
  },
  "BUZZ": {
    "args": [
      "integer"
    ],
    "returns": "integer",
    "kinds": [
      "command",
      "reporter"
    ],
    "description": "BUZZ (integer) Returns the ideal interval in milliseconds between each tick. You can find the actual interval with RACE.",
    "sources": [
      "cdn://caos.html#BUZZ"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "integer"
      ]
    }
  },
  "BVAR": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "BVAR (integer) Returns the variant number for target creature.",
    "sources": [
      "cdn://caos.html#BVAR"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "BYIT": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "BYIT (integer) Returns 1 if the creature is within reach of the IT agent, or 0 if it isn't.",
    "sources": [
      "cdn://caos.html#BYIT"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "CABB": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "CABB (integer) Returns relative position of bottom side of cabin.",
    "sources": [
      "cdn://caos.html#CABB"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "CABL": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "CABL (integer) Returns relative position of left side of cabin.",
    "sources": [
      "cdn://caos.html#CABL"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "CABN": {
    "args": [
      "integer",
      "integer",
      "integer",
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "CABN (command) left (integer) top (integer) right (integer) bottom (integer) Set a vehicles cabin rectangle. The cabin is the area in which agents inside the vehicle are kept. The rectangle is relative to the position of the vehicle. Default cabin is the bounding rectangle of part 0. You might want to use ATTR to set attribute Greedy Cabin, on the vehicle. This will make it automatically pick up items which are dropped in the cabin.",
    "sources": [
      "cdn://caos.html#CABN"
    ],
    "validation": {
      "arity": 4,
      "types": [
        "integer",
        "integer",
        "integer",
        "integer"
      ]
    }
  },
  "CABP": {
    "args": [
      "integer"
    ],
    "returns": "integer",
    "kinds": [
      "command",
      "reporter"
    ],
    "description": "CABP (integer) Returns the plane that passengers of the vehicle are at.",
    "sources": [
      "cdn://caos.html#CABP"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "integer"
      ]
    }
  },
  "CABR": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "CABR (integer) Returns relative position of right side of cabin.",
    "sources": [
      "cdn://caos.html#CABR"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "CABT": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "CABT (integer) Returns relative position of topside of cabin.",
    "sources": [
      "cdn://caos.html#CABT"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "CABV": {
    "args": [
      "integer"
    ],
    "returns": "integer",
    "kinds": [
      "command",
      "reporter"
    ],
    "description": "CABV (integer) Returns the cabin room number.",
    "sources": [
      "cdn://caos.html#CABV"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "integer"
      ]
    }
  },
  "CABW": {
    "args": [
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "CABW (command) cabin_capacity (integer) Set the capacity or width of the cabin. This will determine how many passengers the cabin can hold, each passenger will be on a separate plane within the cabin. Use CABP to set the plane of the first agent relative to the cabin. The default width is zero, this means that the cabin will accept any number of passengers and will place them all on the same plane.",
    "sources": [
      "cdn://caos.html#CABW"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "integer"
      ]
    }
  },
  "CACL": {
    "args": [
      "integer",
      "integer",
      "integer",
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "CACL (command) family (integer) genus (integer) species (integer) ca_index (integer) This associates the classification specified with the CA specified. This allows the linking of CA's to classifiers within creatures' brains.",
    "sources": [
      "cdn://caos.html#CACL"
    ],
    "validation": {
      "arity": 4,
      "types": [
        "integer",
        "integer",
        "integer",
        "integer"
      ]
    }
  },
  "CAGE": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "CAGE (integer) Returns life stage of target creature. See also AGES.",
    "sources": [
      "cdn://caos.html#CAGE"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "CALC": {
    "kinds": [
      "command"
    ],
    "description": "CALC (command) Recalculates all the navigational CAs (warning: slow).",
    "sources": [
      "cdn://caos.html#CALC"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "CALG": {
    "args": [
      "integer",
      "integer"
    ],
    "returns": "integer",
    "kinds": [
      "command",
      "reporter"
    ],
    "description": "CALG (integer) category_id (integer) Find out which algorithm is currently being used for the creature TARG to decide which particular object in a category to look at.",
    "sources": [
      "cdn://caos.html#CALG"
    ],
    "validation": {
      "arity": 2,
      "types": [
        "integer",
        "integer"
      ]
    }
  },
  "CALL": {
    "args": [
      "integer",
      "anything",
      "anything"
    ],
    "kinds": [
      "command"
    ],
    "description": "CALL (command) event_no (integer) param_1 (anything) param_2 (anything) Calls a subroutine script on the owner with the specified event number. When that script finishes the current script is resumed. No variables are shared between the two scripts so any return values must go through OVs. The called script starts in the same INST state as the calling script, however, it may use SLOW or INST to override this initial state. In addition, when the script returns to the calling script, the INST state is reset to what it was before the CALL command, so CALL preserves INSTness in the calling script.",
    "sources": [
      "cdn://caos.html#CALL"
    ],
    "validation": {
      "arity": 3,
      "types": [
        "integer",
        "anything",
        "anything"
      ]
    }
  },
  "CAOS": {
    "returns": "string",
    "kinds": [
      "reporter"
    ],
    "description": "CAOS (string) inline (integer) state_trans (integer) p1 (anything) p2 (anything) commands (string) throws (integer) catches (integer) report (variable) Executes the specified CAOS commands instantly. The local environment (_IT_ VAxx TARG OWNR etc.) will be promoted to the script's environment if inline is non-zero. If state_trans is non-zero, then FROM and OWNR are propogated, if zero, then the script is run orphaned. CAOS returns the output of the script. As you can put multiple scripts through in one call, the output is potentially concatenated. Note that all sets of scripts are executed in ",
    "sources": [
      "cdn://caos.html#CAOS"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "CARR": {
    "returns": "agent",
    "kinds": [
      "reporter"
    ],
    "description": "CARR (agent) Returns the the agent currently holding the target, or NULL if there is none.",
    "sources": [
      "cdn://caos.html#CARR"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "CATA": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "CATA (integer) Returns the target's category. This either depends on its classifier as described in CATI, or is its own individual override set with CATO.",
    "sources": [
      "cdn://caos.html#CATA"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "CATI": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "CATI (integer) family (integer) genus (integer) species (integer) Return the category id for the given classifier. The catalogue tag \"Agent Classifiers\" specifies these, and you can have more than 40. They are tested in order until the first match is found. -1 is always returned if none match. Agents can override their classifier category with CATO.",
    "sources": [
      "cdn://caos.html#CATI"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "CATO": {
    "args": [
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "CATO (command) category (integer) Change the target's category to the one specified. The default is -1 which means the category is based on classifier and the catalogue as described in CATI. See also CATX and CATA.",
    "sources": [
      "cdn://caos.html#CATO"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "integer"
      ]
    }
  },
  "CATX": {
    "returns": "string",
    "kinds": [
      "reporter"
    ],
    "description": "CATX (string) category_id (integer) Returns the name of the given category. For example, \"toy\" or \"bad bug\". The catalogue tag \"Agent Categories\" stores these. If the id is out of range, CATX returns an empty string.",
    "sources": [
      "cdn://caos.html#CATX"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "CHAR": {
    "args": [
      "variable",
      "integer",
      "integer"
    ],
    "returns": "integer",
    "kinds": [
      "command",
      "reporter"
    ],
    "description": "CHAR (integer) string (string) index (integer) Returns a character from a string. String indicies begin at 1.",
    "sources": [
      "cdn://caos.html#CHAR"
    ],
    "validation": {
      "arity": 3,
      "types": [
        "variable",
        "integer",
        "integer"
      ]
    }
  },
  "CHEM": {
    "args": [
      "integer",
      "float"
    ],
    "returns": "float",
    "kinds": [
      "command",
      "reporter"
    ],
    "description": "CHEM (float) chemical (integer) Returns concentration (0.0 to 1.0) of chemical (1 to 255) in the target creature's bloodstream.",
    "sources": [
      "cdn://caos.html#CHEM"
    ],
    "validation": {
      "arity": 2,
      "types": [
        "integer",
        "float"
      ]
    }
  },
  "CLAC": {
    "args": [
      "integer"
    ],
    "returns": "integer",
    "kinds": [
      "command",
      "reporter"
    ],
    "description": "CLAC (integer) This returns the CLAC action of the TARG object. If the TARG is in CLIK mode, then the return value is -2. Otherwise it is the CLAC action.",
    "sources": [
      "cdn://caos.html#CLAC"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "integer"
      ]
    }
  },
  "CLIK": {
    "args": [
      "integer",
      "integer",
      "integer"
    ],
    "returns": "integer",
    "kinds": [
      "command",
      "reporter"
    ],
    "description": "CLIK (command) message_1 (integer) message_2 (integer) message_3 (integer) Sets a chain of three message ids to cycle through as the agent is clicked on. Entries of -1 are ignored. Overriden by CLAC.",
    "sources": [
      "cdn://caos.html#CLIK"
    ],
    "validation": {
      "arity": 3,
      "types": [
        "integer",
        "integer",
        "integer"
      ]
    }
  },
  "CMRA": {
    "args": [
      "integer",
      "integer",
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "CMRA (command) x (integer) y (integer) pan (integer) Move current camera so top left corner of view is at world coordinate x y. Set pan 0 to jump straight to location, pan 1 to smoothly scroll there (unless in a different meta room).",
    "sources": [
      "cdn://caos.html#CMRA"
    ],
    "validation": {
      "arity": 3,
      "types": [
        "integer",
        "integer",
        "integer"
      ]
    }
  },
  "CMRP": {
    "args": [
      "integer",
      "integer",
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "CMRP (command) x (integer) y (integer) pan (integer) Centre current camera on world coordinate x y. Set pan 0 to jump straight to location, pan 1 to smoothly scroll there (unless in different meta room), and pan 2 to smoothly scroll only if the destination is already visible.",
    "sources": [
      "cdn://caos.html#CMRP"
    ],
    "validation": {
      "arity": 3,
      "types": [
        "integer",
        "integer",
        "integer"
      ]
    }
  },
  "CMRT": {
    "args": [
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "CMRT (command) pan (integer) Centre current camera on target. Set pan 0 to jump straight to location, pan 1 to smoothly scroll there (unless in different meta room), and pan 2 to smoothly scroll only if the destination is already visible.",
    "sources": [
      "cdn://caos.html#CMRT"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "integer"
      ]
    }
  },
  "CMRX": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "CMRX (integer) Returns the x coordinate of the centre of the current camera.",
    "sources": [
      "cdn://caos.html#CMRX"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "CMRY": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "CMRY (integer) Returns the y coordinate of the centre of the current camera.",
    "sources": [
      "cdn://caos.html#CMRY"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "CODE": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "CODE (integer) Returns event script number currently being run by target. Returns -1 if not running anything.",
    "sources": [
      "cdn://caos.html#CODE"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "CODF": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "CODF (integer) Returns family of script currently being run by target. Returns -1 if not running anything.",
    "sources": [
      "cdn://caos.html#CODF"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "CODG": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "CODG (integer) Returns genus of script currently being run by target. Returns -1 if not running anything.",
    "sources": [
      "cdn://caos.html#CODG"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "CODP": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "CODP (integer) Returns the offset into the source code of the next instruction to be executed by the target. Use SORC to get the source code. Returns -1 if not running anything.",
    "sources": [
      "cdn://caos.html#CODP"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "CODS": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "CODS (integer) Returns species of script currently being run by target. Returns -1 if not running anything.",
    "sources": [
      "cdn://caos.html#CODS"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "CORE": {
    "args": [
      "float",
      "float",
      "float",
      "float"
    ],
    "kinds": [
      "command"
    ],
    "description": "CORE (command) topY (float) bottomY (float) leftX (float) rightX (float) Sets the bounding box of the physical core of the object TARG. May be set to smaller (or larger) than the sprite's rectangle.",
    "sources": [
      "cdn://caos.html#CORE"
    ],
    "validation": {
      "arity": 4,
      "types": [
        "float",
        "float",
        "float",
        "float"
      ]
    }
  },
  "COS_": {
    "returns": "float",
    "kinds": [
      "reporter"
    ],
    "description": "COS_ (float) theta (float) Returns cosine of theta. Theta should be in degrees.",
    "sources": [
      "cdn://caos.html#COS_"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "CREA": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "CREA (integer) agent (agent) Returns 1 if the agent is a creature, 0 if not.",
    "sources": [
      "cdn://caos.html#CREA"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "DATE": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "DATE (integer) Returns the day within the current season, from 0 to GAME \"engine_LengthOfSeasonInDays\" - 1. See also HIST DATE.",
    "sources": [
      "cdn://caos.html#DATE"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "DAYT": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "DAYT (integer) Returns the current day of the month",
    "sources": [
      "cdn://caos.html#DAYT"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "DBG#": {
    "returns": "string",
    "kinds": [
      "reporter"
    ],
    "description": "DBG# (string) variable (integer) Dumps debug information for the virtual machine of target. Whatever the type of the variable, a string is output.Variable can be: -1 : Whether in INST or not -2 : Whether in LOCK or not -3 : Current TARG of virtual machine -4 : OWNR - should be the same as our outer TARG -5 : FROM - who sent the message which is being run -6 : IT - if a Creature, where their attention was -7 : PART - part number being worked on for compound agents -8 : _P1_ - first parameter of message, if in a message -9 : _P2_ - second parameter of message, if in a mesesage 0 to 99 : Local va",
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "DBG: ASRT": {
    "args": [
      "condition"
    ],
    "kinds": [
      "command"
    ],
    "description": "DBG: ASRT (command) condition (condition) Confirms that a condition is true. If it isn't, it displays a runtime error dialog.",
    "validation": {
      "arity": 1,
      "types": [
        "condition"
      ]
    }
  },
  "DBG: CPRO": {
    "kinds": [
      "command"
    ],
    "description": "DBG: CPRO (command) Clears agent profiling information. Measurements output with DBG: PROF start here.",
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "DBG: FLSH": {
    "kinds": [
      "command"
    ],
    "description": "DBG: FLSH (command) This flushes the system's input buffers - usually only useful if DBG: PAWSed.",
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "DBG: HTML": {
    "args": [
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "DBG: HTML (command) sort_order (integer) Sends CAOS documentation to the output stream. Sort order is 0 for alphabetical, 1 for categorical.",
    "validation": {
      "arity": 1,
      "types": [
        "integer"
      ]
    }
  },
  "DBG: OUTS": {
    "args": [
      "string"
    ],
    "kinds": [
      "command"
    ],
    "description": "DBG: OUTS (command) value (string) Send a string to the debug log - use DBG: POLL to retrieve.",
    "validation": {
      "arity": 1,
      "types": [
        "string"
      ]
    }
  },
  "DBG: OUTV": {
    "args": [
      "decimal"
    ],
    "kinds": [
      "command"
    ],
    "description": "DBG: OUTV (command) value (decimal) Send a number to the debug log - use DBG: POLL to retrieve.",
    "validation": {
      "arity": 1,
      "types": [
        "decimal"
      ]
    }
  },
  "DBG: PAWS": {
    "kinds": [
      "command"
    ],
    "description": "DBG: PAWS (command) This pauses everything in the game. No game driven ticks will occur until a DBG: PLAY command is issued, so this command is only useful for debugging. Use PAUS for pausing of specific agents, which you can use to implement a pause button.",
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "DBG: PLAY": {
    "kinds": [
      "command"
    ],
    "description": "DBG: PLAY (command) This command undoes a previously given DBG: PAWS and allows game time to flow as normal.",
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "DBG: POLL": {
    "kinds": [
      "command"
    ],
    "description": "DBG: POLL (command) This takes all of the DBG: OUTV and DBG: OUTS output to date and writes it to the output stream.",
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "DBG: PROF": {
    "kinds": [
      "command"
    ],
    "description": "DBG: PROF (command) Sends agent profile information to the output stream. This gives you data about the time the engine spends running the update and message handling code for each classifier. The data is measured from engine startup, or the point marked with DBG: CPRO. It's output in comma separated value (CSV) format, so you can load it into a spreadsheet (e.g. Gnumeric or Excel) for sorting and summing.",
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "DBG: TACK": {
    "args": [
      "agent"
    ],
    "kinds": [
      "command"
    ],
    "description": "DBG: TACK (command) follow (agent) Pauses the game when the given agent next executes a single line of CAOS code. This pause is mid-tick, and awaits incoming requests, or the pause key. Either another DBG: TACK or a DBG: PLAY command will make the engine carry on. Any other incoming requests will be processed as normal. However, the virtual machine of the tacking agent is effectively in mid-processing, so some CAOS commands may cause unpredictable results, and even crash the engine. In particular, you shouldn't KILL the tacking agent. You can see which agent is being tracked with TACK.",
    "validation": {
      "arity": 1,
      "types": [
        "agent"
      ]
    }
  },
  "DBG: TOCK": {
    "kinds": [
      "command"
    ],
    "description": "DBG: TOCK (command) This command forces a tick to occur. It is useful in external apps to drive the game according to a different clock instead of the game clock.",
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "DBG: WTIK": {
    "args": [
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "DBG: WTIK (command) new_world_tick (integer) Changes the world tick WTIK to the given value. This should only be used for debugging, as it will potentially leave confusing information in the creature history, and change the time when delayed messages are processed. Its main use is to jump to different seasons and times of day.",
    "validation": {
      "arity": 1,
      "types": [
        "integer"
      ]
    }
  },
  "DBGA": {
    "returns": "string",
    "kinds": [
      "reporter"
    ],
    "description": "DBGA (string) variable (integer) Dumps debug information for target. Whatever the type of the variable, a string is output.Variable can be:0 to 99 : agent variables OV00 to OV99-1 : Counter for timer tick",
    "sources": [
      "cdn://caos.html#DBGA"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "DCOR": {
    "args": [
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "DCOR (command) core_on (integer) Debug command to show the physical core of the TARG agent graphically.",
    "sources": [
      "cdn://caos.html#DCOR"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "integer"
      ]
    }
  },
  "DEAD": {
    "args": [],
    "returns": null,
    "description": "Kill a creature (sets it as deceased)",
    "notes": "Triggers creature\u2019s *Die* event and stops its biology/brain; use KILL after to remove body if needed",
    "kinds": [
      "command",
      "reporter"
    ],
    "sources": [
      "cdn://caos.html#DEAD"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "DECN": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "DECN (integer) Returns the current focus of decision id.",
    "sources": [
      "cdn://caos.html#DECN"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "DELE": {
    "args": [
      "string"
    ],
    "kinds": [
      "command"
    ],
    "description": "DELE (command) variable_name (string) Deletes the specified EAME variable.",
    "sources": [
      "cdn://caos.html#DELE"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "string"
      ]
    }
  },
  "DELG": {
    "args": [
      "string"
    ],
    "kinds": [
      "command"
    ],
    "description": "DELG (command) variable_name (string) Deletes the specified GAME variable.",
    "sources": [
      "cdn://caos.html#DELG"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "string"
      ]
    }
  },
  "DELM": {
    "args": [
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "DELM (command) metaroom_id (integer) Deletes the specified metaroom from the map.",
    "sources": [
      "cdn://caos.html#DELM"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "integer"
      ]
    }
  },
  "DELN": {
    "args": [
      "anything"
    ],
    "kinds": [
      "command"
    ],
    "description": "DELN (command) variable_name (anything) Deletes the specified NAME variable on TARG.",
    "sources": [
      "cdn://caos.html#DELN"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "anything"
      ]
    }
  },
  "DELR": {
    "args": [
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "DELR (command) room_id (integer) Deletes the specified room from the map.",
    "sources": [
      "cdn://caos.html#DELR"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "integer"
      ]
    }
  },
  "DELW": {
    "args": [
      "string"
    ],
    "kinds": [
      "command"
    ],
    "description": "DELW (command) world_name (string) Deletes the specified world directory.",
    "sources": [
      "cdn://caos.html#DELW"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "string"
      ]
    }
  },
  "DFTX": {
    "returns": "float",
    "kinds": [
      "reporter"
    ],
    "description": "DFTX (float) Returns X coordinate of creature's down foot.",
    "sources": [
      "cdn://caos.html#DFTX"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "DFTY": {
    "returns": "float",
    "kinds": [
      "reporter"
    ],
    "description": "DFTY (float) Returns Y coordinate of creature's down foot.",
    "sources": [
      "cdn://caos.html#DFTY"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "DIRN": {
    "args": [
      "integer"
    ],
    "returns": "integer",
    "kinds": [
      "command",
      "reporter"
    ],
    "description": "DIRN (integer) Returns the direction that target creature is facing. North 0, South 1, East 2, West 3.",
    "sources": [
      "cdn://caos.html#DIRN"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "integer"
      ]
    }
  },
  "DISQ": {
    "returns": "float",
    "kinds": [
      "reporter"
    ],
    "description": "DISQ (float) other (agent) Returns the square of the distance between the centre points of the target agent, and the other agent. It is quicker to compare this square against a squared constant directly, or if you need the actual distance use SQRT.",
    "sources": [
      "cdn://caos.html#DISQ"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "DIVV": {
    "args": [
      "variable",
      "decimal"
    ],
    "kinds": [
      "command"
    ],
    "description": "DIVV (command) var (variable) div (decimal) Divides a variable by an integer or float, so var = var / div. Uses integer division if both numbers are integers, or floating point division otherwise.",
    "sources": [
      "cdn://caos.html#DIVV"
    ],
    "validation": {
      "arity": 2,
      "types": [
        "variable",
        "decimal"
      ]
    }
  },
  "DMAP": {
    "args": [
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "DMAP (command) debug_map (integer) Set to 1 to turn the debug map image on, 0 to turn it off. The debug map includes vehicle cabin lines.",
    "sources": [
      "cdn://caos.html#DMAP"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "integer"
      ]
    }
  },
  "DOCA": {
    "args": [
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "DOCA (command) no_of_updates (integer) Updates all CAs the specified number of times.",
    "sources": [
      "cdn://caos.html#DOCA"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "integer"
      ]
    }
  },
  "DOIF": {
    "args": [
      "condition"
    ],
    "kinds": [
      "command"
    ],
    "description": "DOIF (command) condition (condition) Execute a block of code if the condition is true. The code block ends at the next ELSE, ELIF or ENDI. A condition is composed of one or more comparisons joined by AND or OR. A comparison compares two values with EQ, NE, GT, GE, LT, LE, or alternatively =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=.DOIF ov00 GE 5 AND ov00 LT 10--- code block 1 ---ELIF ov00 GE 10 OR ov00 LT 100--- code block 2 ---ELSE--- code block 3 ---ENDIConditions are evaluated simply from left to right, so \"a AND b OR c\" is the same as \"(a AND b) OR c\", not \"a AND ( b OR c )\".Conditional stateme",
    "sources": [
      "cdn://caos.html#DOIF"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "condition"
      ]
    }
  },
  "DOIN": {
    "args": [
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "DOIN (command) no_of_instincts_to_process (integer) Make the creature TARG process N instincts.",
    "sources": [
      "cdn://caos.html#DOIN"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "integer"
      ]
    }
  },
  "DONE": {
    "kinds": [
      "command"
    ],
    "description": "DONE (command) Stops the targetted creature doing any involuntary actions.",
    "sources": [
      "cdn://caos.html#DONE"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "DOOR": {
    "args": [
      "integer",
      "integer",
      "integer"
    ],
    "returns": "integer",
    "kinds": [
      "command",
      "reporter"
    ],
    "description": "DOOR (integer) room_id1 (integer) room_id2 (integer) Returns the door permiability between two rooms.",
    "sources": [
      "cdn://caos.html#DOOR"
    ],
    "validation": {
      "arity": 3,
      "types": [
        "integer",
        "integer",
        "integer"
      ]
    }
  },
  "DOWN": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "DOWN (integer) Returns the value of the down constant.",
    "sources": [
      "cdn://caos.html#DOWN"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "DPAS": {
    "args": [
      "integer",
      "integer",
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "DPAS (command) family (integer) genus (integer) species (integer) Drop all passengers matching classifier.",
    "sources": [
      "cdn://caos.html#DPAS"
    ],
    "validation": {
      "arity": 3,
      "types": [
        "integer",
        "integer",
        "integer"
      ]
    }
  },
  "DREA": {
    "args": [
      "integer"
    ],
    "returns": "integer",
    "kinds": [
      "command",
      "reporter"
    ],
    "description": "DREA (integer) Returns 1 if the creature is asleep and dreaming, 0 otherwise.",
    "sources": [
      "cdn://caos.html#DREA"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "integer"
      ]
    }
  },
  "DRIV": {
    "args": [
      "integer",
      "float"
    ],
    "returns": "float",
    "kinds": [
      "command",
      "reporter"
    ],
    "description": "DRIV (float) drive (integer) Returns the value (0.0 to 1.0) of the specified drive.",
    "sources": [
      "cdn://caos.html#DRIV"
    ],
    "validation": {
      "arity": 2,
      "types": [
        "integer",
        "float"
      ]
    }
  },
  "DROP": {
    "kinds": [
      "command"
    ],
    "description": "DROP (command) Force the TARG to drop what it is carrying. this will try to find a safe place for the agent to fall.",
    "sources": [
      "cdn://caos.html#DROP"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "DRV!": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "DRV! (integer) Returns the id of the highest drive for the target creature.",
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "DSEE": {
    "args": [
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "DSEE (command) can_see_on (integer) Debug command to show all the agents which can be seen by any creature.",
    "sources": [
      "cdn://caos.html#DSEE"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "integer"
      ]
    }
  },
  "EAME": {
    "returns": "variable",
    "kinds": [
      "reporter"
    ],
    "description": "EAME (variable) variable_name (string) Very similar to GAME variables only they aren't saved or loaded with the world; they keep their value between worlds for one session of the engine. The E in EAME stands for for Engine. See the table of engine Eame Variables.",
    "sources": [
      "cdn://caos.html#EAME"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "EAMN": {
    "returns": "string",
    "kinds": [
      "reporter"
    ],
    "description": "EAMN (string) previous (string) Enumerates through EAME variable names, roughly as GAMN does through GAME variables. Start and end with an empty string.",
    "sources": [
      "cdn://caos.html#EAMN"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "ECON": {
    "args": [
      "agent"
    ],
    "kinds": [
      "command"
    ],
    "description": "ECON (command) agent (agent) Starts an enumeration across all the agents in a connective system, where agent is any agent within the connective system.",
    "sources": [
      "cdn://caos.html#ECON"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "agent"
      ]
    }
  },
  "ELAS": {
    "args": [
      "integer"
    ],
    "returns": "integer",
    "kinds": [
      "command",
      "reporter"
    ],
    "description": "ELAS (integer) Return the elasticity percentage.",
    "sources": [
      "cdn://caos.html#ELAS"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "integer"
      ]
    }
  },
  "ELIF": {
    "args": [
      "condition"
    ],
    "kinds": [
      "command"
    ],
    "description": "ELIF (command) condition (condition) ELseIF command to follow a DOIF. If the condition in a DOIF is false, each following ELIF command will be evaluated in turn. Only the first true condition will have its code block executed.",
    "sources": [
      "cdn://caos.html#ELIF"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "condition"
      ]
    }
  },
  "ELSE": {
    "kinds": [
      "command"
    ],
    "description": "ELSE (command) ELSE clause to follow DOIF and ELIF(s). If nothing else matches, the ELSE block will be executed.",
    "sources": [
      "cdn://caos.html#ELSE"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "EMID": {
    "returns": "string",
    "kinds": [
      "reporter"
    ],
    "description": "EMID (string) Returns a string containing all the metaroom ids in the world seperated by spaces.",
    "sources": [
      "cdn://caos.html#EMID"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "EMIT": {
    "args": [
      "integer",
      "float"
    ],
    "kinds": [
      "command"
    ],
    "description": "EMIT (command) ca_index (integer) amount (float) Target now constantly emits an amount of a CA into the room it is in.",
    "sources": [
      "cdn://caos.html#EMIT"
    ],
    "validation": {
      "arity": 2,
      "types": [
        "integer",
        "float"
      ]
    }
  },
  "ENDI": {
    "kinds": [
      "command"
    ],
    "description": "ENDI (command) Closes a DOIF...ELIF...ELSE... set.",
    "sources": [
      "cdn://caos.html#ENDI"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "ENUM": {
    "args": [
      "family (int)",
      "genus (int)",
      "species (int)"
    ],
    "returns": null,
    "description": "Loop through agents matching classifier, setting TARG to each",
    "notes": "Use 0 as wildcard for family/genus/species; must use NEXT to end loop",
    "kinds": [
      "command"
    ],
    "sources": [
      "cdn://caos.html#ENUM"
    ],
    "validation": {
      "arity": 3,
      "types": [
        "family (int)",
        "genus (int)",
        "species (int)"
      ]
    }
  },
  "EPAS": {
    "args": [
      "integer",
      "integer",
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "EPAS (command) family (integer) genus (integer) species (integer) Enumerate over owner vehicle's passengers which match the given classifier. Similar to ENUM.",
    "sources": [
      "cdn://caos.html#EPAS"
    ],
    "validation": {
      "arity": 3,
      "types": [
        "integer",
        "integer",
        "integer"
      ]
    }
  },
  "ERID": {
    "returns": "string",
    "kinds": [
      "reporter"
    ],
    "description": "ERID (string) metaroom_id (integer) Returns a string containing all the room ids in the specified metaroom separated by spaces. Returns all rooms in the world if metaroom_id is -1.",
    "sources": [
      "cdn://caos.html#ERID"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "ESEE": {
    "args": [
      "integer",
      "integer",
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "ESEE (command) family (integer) genus (integer) species (integer) As ENUM, except only enumerates through agents which OWNR can see. An agent can see another if it is within RNGE, its PERM allows it to see through all intervening walls, and for creatures ATTR Invisible isn't set. See also STAR and SEEE. In install scripts, when there is no OWNR, TARG is used instead.",
    "sources": [
      "cdn://caos.html#ESEE"
    ],
    "validation": {
      "arity": 3,
      "types": [
        "integer",
        "integer",
        "integer"
      ]
    }
  },
  "ETCH": {
    "args": [
      "integer",
      "integer",
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "ETCH (command) family (integer) genus (integer) species (integer) As ENUM, except only enumerates through agents which OWNR is touching. Agents are said to be touching if their bounding rectangles overlap. See also TTAR. In install scripts, when there is no OWNR, TARG is used instead.",
    "sources": [
      "cdn://caos.html#ETCH"
    ],
    "validation": {
      "arity": 3,
      "types": [
        "integer",
        "integer",
        "integer"
      ]
    }
  },
  "ETIK": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "ETIK (integer) Returns the number of ticks since the engine was loaded in.",
    "sources": [
      "cdn://caos.html#ETIK"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "EVER": {
    "kinds": [
      "command"
    ],
    "description": "EVER (command) Forms the end of a LOOP..EVER loop, which just loops forever.",
    "sources": [
      "cdn://caos.html#EVER"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "EXPR": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "EXPR (integer) Returns the current facial expression index for the creature.",
    "sources": [
      "cdn://caos.html#EXPR"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "FACE": {
    "args": [
      "integer"
    ],
    "returns": "integer",
    "kinds": [
      "command",
      "reporter"
    ],
    "description": "FACE (command) set_number (integer) Sets a facial expression on target creature.",
    "sources": [
      "cdn://caos.html#FACE"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "integer"
      ]
    }
  },
  "FADE": {
    "kinds": [
      "command"
    ],
    "description": "FADE (command) Fade out a controlled sound.",
    "sources": [
      "cdn://caos.html#FADE"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "FALL": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "FALL (integer) Returns 1 if target is moving under the influence of gravity, or 0 if it is at rest.",
    "sources": [
      "cdn://caos.html#FALL"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "FCUS": {
    "kinds": [
      "command"
    ],
    "description": "FCUS (command) Set keyboard focus to the current PART of the targetted agent. The part should be a PAT: TEXT. If you TARG NULL first, then no part will have the focus.",
    "sources": [
      "cdn://caos.html#FCUS"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "FDMP": {
    "args": [
      "float"
    ],
    "returns": "float",
    "kinds": [
      "command",
      "reporter"
    ],
    "description": "FDMP (float) Get current forwards damping. The value is from 0.0 to 1.0 where 0.0 means no damping, 1.0 maximum.",
    "sources": [
      "cdn://caos.html#FDMP"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "float"
      ]
    }
  },
  "FILE GLOB": {
    "args": [
      "integer",
      "string"
    ],
    "kinds": [
      "command"
    ],
    "description": "FILE GLOB (command) directory (integer) filespec (string) This globs a journal directory (0 for world one, 1 for main one) for the filespec provided. As all this can do is list files, it does not worry about where you look relative to the journal directory in question. Use this with care. Having globbed a directory, the listing is available on the input stream as a number, followed by the names of each file. To read - ise INOK, INNI and INNL. Once you have finished, remember to do a FILE ICLO to remove the glob output from the VM.",
    "validation": {
      "arity": 2,
      "types": [
        "integer",
        "string"
      ]
    }
  },
  "FILE ICLO": {
    "kinds": [
      "command"
    ],
    "description": "FILE ICLO (command) Disconnects anything which is attached to the input stream. If this is a file, then the file is closed.",
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "FILE IOPE": {
    "args": [
      "integer",
      "string"
    ],
    "kinds": [
      "command"
    ],
    "description": "FILE IOPE (command) directory (integer) filename (string) Sets the file for the input stream of the current virtual machine - there is a virtual machine for each agent, so this is much the same as setting it for OWNR. Use INNL, INNI and INNF to get data from the stream, and INOK to check validity of the stream. The filename should include any file extension.You should use FILE ICLO to close the file, although this happens automatically if you set a new file, if the virtual machine is destroyed, or if the engine exits.Directory is 0 for the current world's journal directory, 1 for the main jour",
    "validation": {
      "arity": 2,
      "types": [
        "integer",
        "string"
      ]
    }
  },
  "FILE JDEL": {
    "args": [
      "integer",
      "string"
    ],
    "kinds": [
      "command"
    ],
    "description": "FILE JDEL (command) directory (integer) filename (string) This deletes the file (filename) specified from the journal directory specified. If directory is zero, this is the current world's journal directory, otherwise it is the main journal directory. It deletes the file immediately, rather than marking it for the attic.",
    "validation": {
      "arity": 2,
      "types": [
        "integer",
        "string"
      ]
    }
  },
  "FILE OCLO": {
    "kinds": [
      "command"
    ],
    "description": "FILE OCLO (command) Disconnects anything which is attached to the output stream. If this is a file, then the file is closed.",
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "FILE OFLU": {
    "kinds": [
      "command"
    ],
    "description": "FILE OFLU (command) Flush output stream. If it is attached to a disk file, this will force any data in the buffer to be written to disk.",
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "FILE OOPE": {
    "args": [
      "integer",
      "string",
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "FILE OOPE (command) directory (integer) filename (string) append (integer) Sets the file for the output stream of the current virtual machine - there is a virtual machine for each agent, so this is much the same as setting it for OWNR. Use OUTV and OUTS or various other commands to send text data to the stream. The filename should include any file extension.You should use FILE OCLO to close the file, although this happens automatically if you set a new file, if the virtual machine is destroyed, or if the engine exits.Directory is 0 for the current world's journal directory, 1 for the main jour",
    "validation": {
      "arity": 3,
      "types": [
        "integer",
        "string",
        "integer"
      ]
    }
  },
  "FLIP": {
    "args": [
      "integer"
    ],
    "returns": "integer",
    "kinds": [
      "command",
      "reporter"
    ],
    "description": "FLIP (integer) Is the current sprite for this agent vertically flipped (returns 1) or not (returns 0)",
    "sources": [
      "cdn://caos.html#FLIP"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "integer"
      ]
    }
  },
  "FLTO": {
    "args": [
      "float",
      "float"
    ],
    "kinds": [
      "command"
    ],
    "description": "FLTO (command) screen_x (float) screen_y (float) Move the top left corner of target to either the given screen coordinates, or the given coordinates relative to the agent it is FREL to. Useful for floating agents.",
    "sources": [
      "cdn://caos.html#FLTO"
    ],
    "validation": {
      "arity": 2,
      "types": [
        "float",
        "float"
      ]
    }
  },
  "FLTX": {
    "returns": "float",
    "kinds": [
      "reporter"
    ],
    "description": "FLTX (float) This returns the X position of the TARG object's floating vector.",
    "sources": [
      "cdn://caos.html#FLTX"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "FLTY": {
    "returns": "float",
    "kinds": [
      "reporter"
    ],
    "description": "FLTY (float) This returns the Y position of the TARG object's floating vector.",
    "sources": [
      "cdn://caos.html#FLTY"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "FMLY": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "FMLY (integer) Returns family of target. See also GNUS, SPCS.",
    "sources": [
      "cdn://caos.html#FMLY"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "FORF": {
    "args": [
      "agent"
    ],
    "kinds": [
      "command"
    ],
    "description": "FORF (command) creature_to_learn_about (agent) Set the friends or foe lobe to learn from the creature.",
    "sources": [
      "cdn://caos.html#FORF"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "agent"
      ]
    }
  },
  "FRAT": {
    "args": [
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "FRAT (command) FrameRate (integer) This command sets the frame rate on the TARG agent. If it is a compound agent, then the part affected can be set with the PART command. Valid rates are from 1 to 255. 1 is Normal rate, 2 is half speed etc...",
    "sources": [
      "cdn://caos.html#FRAT"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "integer"
      ]
    }
  },
  "FREL": {
    "args": [
      "agent"
    ],
    "kinds": [
      "command"
    ],
    "description": "FREL (command) relative (agent) Sets an agent for target to float relative to. To make target actually float, you need to set attribute Floatable as well. Set FREL to NULL to make the target float relative to the main camera - this is the default. Use FLTO to set the relative position of the top left corner of the floating agent to the top left corner of the agent it is floating relative to.",
    "sources": [
      "cdn://caos.html#FREL"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "agent"
      ]
    }
  },
  "FRIC": {
    "args": [
      "integer"
    ],
    "returns": "integer",
    "kinds": [
      "command",
      "reporter"
    ],
    "description": "FRIC (integer) Return physics friction percentage.",
    "sources": [
      "cdn://caos.html#FRIC"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "integer"
      ]
    }
  },
  "FRMT": {
    "args": [
      "integer",
      "integer",
      "integer",
      "integer",
      "integer",
      "integer",
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "FRMT (command) left_margin (integer) top_margin (integer) right_margin (integer) bottom_margin (integer) line_spacing (integer) character_spacing (integer) justification (integer) Use this command to alter the appearance of the current text part. The line and character spacing values are expressed in number of extra pixels to insert between characters. Values for justification are 0 - Left, 1 - Right, 2 - Center, 4 - Bottom, 8 - Middle, 16 - Last Page Scroll (if you add extra text to the part and show the last page, it will scroll upwards). You may add mutually compatible numbers. The default ",
    "sources": [
      "cdn://caos.html#FRMT"
    ],
    "validation": {
      "arity": 7,
      "types": [
        "integer",
        "integer",
        "integer",
        "integer",
        "integer",
        "integer",
        "integer"
      ]
    }
  },
  "FROM": {
    "returns": "variable",
    "kinds": [
      "reporter"
    ],
    "description": "FROM (variable) If we're processing a message, this is the OWNR who sent the message. NULL if the message was sent from an injected script or an install script. If the message was sent over the network using NET: WRIT, then this contains the user id of the sender, as a string.",
    "sources": [
      "cdn://caos.html#FROM"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "FRSH": {
    "kinds": [
      "command"
    ],
    "description": "FRSH (command) Refreshes the main view port.",
    "sources": [
      "cdn://caos.html#FRSH"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "FTOI": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "FTOI (integer) number_to_convert (float) Converts a floating-point value into its integer equivalent.",
    "sources": [
      "cdn://caos.html#FTOI"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "FVEL": {
    "args": [
      "float"
    ],
    "returns": "float",
    "kinds": [
      "command",
      "reporter"
    ],
    "description": "FVEL (float) Get current forwards velocity.",
    "sources": [
      "cdn://caos.html#FVEL"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "float"
      ]
    }
  },
  "FVWM": {
    "returns": "string",
    "kinds": [
      "reporter"
    ],
    "description": "FVWM (string) name (string) This returns a guaranteed-safe filename for use in world names, journal file names, etc.",
    "sources": [
      "cdn://caos.html#FVWM"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "GAIT": {
    "args": [
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "GAIT (command) gait_number (integer) Specifies the current gait for a creature. The gaits are genetically defined. It sets the gait of the creature agent stored in TARG.",
    "sources": [
      "cdn://caos.html#GAIT"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "integer"
      ]
    }
  },
  "GALL": {
    "args": [
      "string",
      "integer"
    ],
    "returns": "string",
    "kinds": [
      "command",
      "reporter"
    ],
    "description": "GALL (string) Returns the gallery (sprite file) used by an agent. This works for simple and compound agents (using the current PART).",
    "sources": [
      "cdn://caos.html#GALL"
    ],
    "validation": {
      "arity": 2,
      "types": [
        "string",
        "integer"
      ]
    }
  },
  "GAME": {
    "returns": "variable",
    "kinds": [
      "reporter"
    ],
    "description": "GAME (variable) variable_name (string) A game variable is a global variable which can be referenced by name. eg: SETV GAME \"pi\" 3.142Game variables are stored as part of the world and so will be saved out in the world file. If a script uses a non-existant game variable, that variable will be created automatically (with value integer zero). Agents, integers, floats and strings can be stored in game variables. Variable names are case sensitive. When a new world is loaded, all the game variables are cleared.There are some conventions for the variable names: engine_ for Creatures Engine cav_ for C",
    "sources": [
      "cdn://caos.html#GAME"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "GAMN": {
    "returns": "string",
    "kinds": [
      "reporter"
    ],
    "description": "GAMN (string) previous (string) Enumerates through game variable names. Pass in an empty string to find the first one, and then the previous one to find the next. Empty string is returned at the end.",
    "sources": [
      "cdn://caos.html#GAMN"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "GENE CLON": {
    "args": [
      "agent",
      "integer",
      "agent",
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "GENE CLON (command) dest_agent (agent) dest_slot (integer) source_agent (agent) source_slot (integer) Clones a genome, creating a new moniker and copying the genetics file.",
    "validation": {
      "arity": 4,
      "types": [
        "agent",
        "integer",
        "agent",
        "integer"
      ]
    }
  },
  "GENE CROS": {
    "args": [
      "agent",
      "integer",
      "agent",
      "integer",
      "agent",
      "integer",
      "integer",
      "integer",
      "integer",
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "GENE CROS (command) child_agent (agent) child_slot (integer) mum_agent (agent) mum_slot (integer) dad_agent (agent) dad_slot (integer) mum_chance_of_mutation (integer) mum_degree_of_mutation (integer) dad_chance_of_mutation (integer) dad_degree_of_mutation. (integer) Crosses two genomes with mutation, and fills in a child geneme slot. Mutation variables may be in the range of 0 to 255.",
    "validation": {
      "arity": 10,
      "types": [
        "agent",
        "integer",
        "agent",
        "integer",
        "agent",
        "integer",
        "integer",
        "integer",
        "integer",
        "integer"
      ]
    }
  },
  "GENE KILL": {
    "args": [
      "agent",
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "GENE KILL (command) agent (agent) slot (integer) Clears a genome slot.",
    "validation": {
      "arity": 2,
      "types": [
        "agent",
        "integer"
      ]
    }
  },
  "GENE LOAD": {
    "args": [
      "agent",
      "integer",
      "string"
    ],
    "kinds": [
      "command"
    ],
    "description": "GENE LOAD (command) agent (agent) slot (integer) gene_file (string) Loads an engineered gene file into a slot. Slot 0 is a special slot used only for creatures, and contains the moniker they express. Only the NEW: CREA command fills it in. Other slot numbers are used in pregnant creatures, in eggs, or to temporarily store a genome before expressing it with NEW: CREA. You can use them as general purpose genome stores.The gene file can have any name, and is loaded from the main genetics file. A new moniker is generated, and a copy of the gene file put in the world directory. You can use * and ? ",
    "validation": {
      "arity": 3,
      "types": [
        "agent",
        "integer",
        "string"
      ]
    }
  },
  "GENE MOVE": {
    "args": [
      "agent",
      "integer",
      "agent",
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "GENE MOVE (command) dest_agent (agent) dest_slot (integer) source_agent (agent) source_slot (integer) Moves a genome from one slot to another.",
    "validation": {
      "arity": 4,
      "types": [
        "agent",
        "integer",
        "agent",
        "integer"
      ]
    }
  },
  "GIDS FMLY": {
    "args": [
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "GIDS FMLY (command) family (integer) Output the genus numbers for which there are scripts in the scriptorium for the given family. List is space delimited.",
    "validation": {
      "arity": 1,
      "types": [
        "integer"
      ]
    }
  },
  "GIDS GNUS": {
    "args": [
      "integer",
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "GIDS GNUS (command) family (integer) genus (integer) Output the species numbers for which there are scripts in the scriptorium for the given family and genus. List is space delimited.",
    "validation": {
      "arity": 2,
      "types": [
        "integer",
        "integer"
      ]
    }
  },
  "GIDS ROOT": {
    "kinds": [
      "command"
    ],
    "description": "GIDS ROOT (command) Output the family numbers for which there are scripts in the scriptorium. List is space delimited.",
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "GIDS SPCS": {
    "args": [
      "integer",
      "integer",
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "GIDS SPCS (command) family (integer) genus (integer) species (integer) Output the event numbers of scripts in the scriptorium for the given classifier. List is space delimited.",
    "validation": {
      "arity": 3,
      "types": [
        "integer",
        "integer",
        "integer"
      ]
    }
  },
  "GMAP": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "GMAP (integer) x (float) y (float) Returns the metaroom id at point x,y on the map. If the point is outside the room system, it returns -1.",
    "sources": [
      "cdn://caos.html#GMAP"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "GNAM": {
    "returns": "string",
    "kinds": [
      "reporter"
    ],
    "description": "GNAM (string) Returns the game name. For example \"Creatures 3\".",
    "sources": [
      "cdn://caos.html#GNAM"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "GNUS": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "GNUS (integer) Returns genus of target. See also FMLY, SPCS.",
    "sources": [
      "cdn://caos.html#GNUS"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "GOTO": {
    "args": [
      "label"
    ],
    "kinds": [
      "command"
    ],
    "description": "GOTO (command) destination (label) Don't use this command. It jumps directly to a label defined by SUBR. This command is only here because it is used implicitly by DOIF blocks. This is a really dangerous command to use manually, because if you jump out of a block of code (eg a LOOP...EVER block), the stack frame will no longer be correct, and the script will most likely crash. Don't use it! See SUBR.",
    "sources": [
      "cdn://caos.html#GOTO"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "label"
      ]
    }
  },
  "GPAS": {
    "args": [
      "integer",
      "integer",
      "integer",
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "GPAS (command) family (integer) genus (integer) species (integer) rect_to_use (integer) Collect all nearby agents matching the classifier as passengers. rect_to_use 0 : Nearby means touching bounding rectangle of agentrect_to_use 1 : Nearby means touching cabin rectangle",
    "sources": [
      "cdn://caos.html#GPAS"
    ],
    "validation": {
      "arity": 4,
      "types": [
        "integer",
        "integer",
        "integer",
        "integer"
      ]
    }
  },
  "GRAP": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "GRAP (integer) x (float) y (float) Returns the room id at point x,y on the map. If the point is outside the room system, it returns -1.",
    "sources": [
      "cdn://caos.html#GRAP"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "GRID": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "GRID (integer) agent (agent) direction (integer) Returns the ID of a room adjacent to the agent in the given direction. A straight line is drawn from the centre of the agent until it hits a room. Directions are LEFT, RGHT, _UP_, or DOWN. A value of -1 is returned if no room can be found.",
    "sources": [
      "cdn://caos.html#GRID"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "GRPL": {
    "args": [
      "integer",
      "integer",
      "integer",
      "float",
      "float"
    ],
    "kinds": [
      "command"
    ],
    "description": "GRPL (command) red (integer) green (integer) blue (integer) min_y (float) max_y (float) Add a line to a graph (previously created with PAT: GRPH). The first line you add will be line 0.",
    "sources": [
      "cdn://caos.html#GRPL"
    ],
    "validation": {
      "arity": 5,
      "types": [
        "integer",
        "integer",
        "integer",
        "float",
        "float"
      ]
    }
  },
  "GRPV": {
    "args": [
      "integer",
      "float"
    ],
    "kinds": [
      "command"
    ],
    "description": "GRPV (command) line_index (integer) value (float) Add a value to a line on a graph. after you have added a value to each line on the graph, it will be updated by scrolling the current values to the left",
    "sources": [
      "cdn://caos.html#GRPV"
    ],
    "validation": {
      "arity": 2,
      "types": [
        "integer",
        "float"
      ]
    }
  },
  "GSUB": {
    "args": [
      "label"
    ],
    "kinds": [
      "command"
    ],
    "description": "GSUB (command) destination (label) Jumps to a subroutine defined by SUBR. Execution will continue at the instruction after the GSUB when the subroutine hits a RETN command.",
    "sources": [
      "cdn://caos.html#GSUB"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "label"
      ]
    }
  },
  "GTOS": {
    "returns": "string",
    "kinds": [
      "reporter"
    ],
    "description": "GTOS (string) slot (integer) Returns the target's moniker in the given gene variable slot. This universally unique identifier is the name of a genetics file. Slot 0 is a creature's actual genome. Other slots are used in pregnant creatures, eggs and other places.",
    "sources": [
      "cdn://caos.html#GTOS"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "HAIR": {
    "args": [
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "HAIR (command) stage (integer) Tidies or ruffles hair. Positive means tidy, negative untidy. There can be multiple stages of tidiness or untidiness; the more extreme the value the tidier or untidier.",
    "sources": [
      "cdn://caos.html#HAIR"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "integer"
      ]
    }
  },
  "HAND": {
    "args": [
      "string"
    ],
    "returns": "string",
    "kinds": [
      "command",
      "reporter"
    ],
    "description": "HAND (string) This returns the name of the hand.",
    "sources": [
      "cdn://caos.html#HAND"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "string"
      ]
    }
  },
  "HEAP": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "HEAP (integer) index (integer) Returns heap and garbage collection information.0 - current allocated heap memory (development builds only)1 - total agents, including ones waiting to be garbage collected2 - similar, but just for creatures",
    "sources": [
      "cdn://caos.html#HEAP"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "HELD": {
    "returns": "agent",
    "kinds": [
      "reporter"
    ],
    "description": "HELD (agent) Returns the item currently held by the target. For vehicles this returns a random carried agent if carrying more than one. Consider using EPAS instead.",
    "sources": [
      "cdn://caos.html#HELD"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "HELP": {
    "kinds": [
      "command"
    ],
    "description": "HELP (command) Lists all command names to the output stream.",
    "sources": [
      "cdn://caos.html#HELP"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "HGHT": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "HGHT (integer) Returns the height of target.",
    "sources": [
      "cdn://caos.html#HGHT"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "HHLD": {
    "returns": "agent",
    "kinds": [
      "reporter"
    ],
    "description": "HHLD (agent) Returns the creature currently holding hands with the pointer agent. NULL if no agent is holding hands.",
    "sources": [
      "cdn://caos.html#HHLD"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "HIRP": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "HIRP (integer) room_id (integer) ca_index (integer) directions (integer) Returns id of the room adjacent to this one with the highest concentration of the given CA. direction is 0 for left/right, 1 for any direction.",
    "sources": [
      "cdn://caos.html#HIRP"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "HIST CAGE": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "HIST CAGE (integer) moniker (string) event_no (integer) Returns the life stage of the creature when the given life event happened.",
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "HIST COUN": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "HIST COUN (integer) moniker (string) Returns the number of life events that there are for the given moniker. Returns 0 of there are no events, or the moniker doesn't exist.",
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "HIST CROS": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "HIST CROS (integer) moniker (string) Returns the number of crossover points when the genome was made by splicing its parents genomes.",
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "HIST DATE": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "HIST DATE (integer) world_tick (integer) Returns the day within the current season. This is the same as DATE. See also WTIK and HIST WTIK.",
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "HIST EVNT": {
    "args": [
      "string",
      "integer",
      "string",
      "string"
    ],
    "kinds": [
      "command"
    ],
    "description": "HIST EVNT (command) moniker (string) event_type (integer) related_moniker_1 (string) related_moniker_2 (string) Triggers a life event of the given type. Some events are triggered automatically by the engine, some events need triggering from CAOS, others are custom events that you can use for your own purposes. See HIST TYPE for details of the event numbers. All new events made call the Life Event script.",
    "validation": {
      "arity": 4,
      "types": [
        "string",
        "integer",
        "string",
        "string"
      ]
    }
  },
  "HIST FIND": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "HIST FIND (integer) moniker (string) event_type (integer) from_index (integer) Searches for a life event of a certain HIST TYPE for the given moniker. The search begins at the life event after the from index. Specify -1 to find the first event. Returns the event number, or -1 if there is no matching event.",
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "HIST FINR": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "HIST FINR (integer) moniker (string) event_type (integer) from_index (integer) Reverse searches for a life event of a certain HIST TYPE for the given moniker. The search begins at the life event before the from index. Specify -1 to find the last event. Returns the event number, or -1 if there is no matching event.",
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "HIST FOTO": {
    "args": [
      "string",
      "integer",
      "string"
    ],
    "returns": "string",
    "kinds": [
      "command",
      "reporter"
    ],
    "description": "HIST FOTO (string) moniker (string) event_no (integer) For the given life event, returns the filename of the associated photograph, or an empty string if there is no photo.",
    "validation": {
      "arity": 3,
      "types": [
        "string",
        "integer",
        "string"
      ]
    }
  },
  "HIST GEND": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "HIST GEND (integer) moniker (string) Returns the sex that the creature with the given moniker has or had. 1 for male, 2 for female. If the creature hasn't been born yet, returns -1.",
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "HIST GNUS": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "HIST GNUS (integer) moniker (string) Returns the genus of the moniker. This is 1 for Norn, 2 for Grendel, 3 for Ettin by convention.",
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "HIST MON1": {
    "returns": "string",
    "kinds": [
      "reporter"
    ],
    "description": "HIST MON1 (string) moniker (string) event_no (integer) For the given life event, returns the first associated moniker.",
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "HIST MON2": {
    "returns": "string",
    "kinds": [
      "reporter"
    ],
    "description": "HIST MON2 (string) moniker (string) event_no (integer) For the given life event, returns the second associated moniker.",
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "HIST MUTE": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "HIST MUTE (integer) moniker (string) Returns the number of point mutations the genome received during crossover from its parents.",
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "HIST NAME": {
    "args": [
      "string",
      "string"
    ],
    "returns": "string",
    "kinds": [
      "command",
      "reporter"
    ],
    "description": "HIST NAME (string) moniker (string) Returns the name of the creature with the given moniker.",
    "validation": {
      "arity": 2,
      "types": [
        "string",
        "string"
      ]
    }
  },
  "HIST NETU": {
    "returns": "string",
    "kinds": [
      "reporter"
    ],
    "description": "HIST NETU (string) moniker (string) event_no (integer) Returns the network identifier of the user when the given life event happened.",
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "HIST NEXT": {
    "returns": "string",
    "kinds": [
      "reporter"
    ],
    "description": "HIST NEXT (string) moniker (string) Returns the next moniker which has a history, or an empty string if we're at the end already. If the specified moniker is an empty string or doesn't have a history, then the first moniker with a history entry is returned, or an empty string if there isn't one.",
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "HIST PREV": {
    "returns": "string",
    "kinds": [
      "reporter"
    ],
    "description": "HIST PREV (string) moniker (string) Returns the previous moniker which has a history. If the specified moniker is an empty string or doesn't have a history, then the last moniker with a history entry is returned, or an empty string if there isn't one.",
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "HIST RTIM": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "HIST RTIM (integer) moniker (string) event_no (integer) Returns the real world time when the given life event happened. This is measured in seconds since midnight, 1 January 1970 in UTC. To display, use RTIF.",
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "HIST SEAN": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "HIST SEAN (integer) world_tick (integer) Returns the current season for a given world tick. This is the same as SEAN. See also WTIK and HIST WTIK.",
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "HIST TAGE": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "HIST TAGE (integer) moniker (string) event_no (integer) Returns the age in ticks of the creature when the given life event happened to it. If the creature was not in the world, wasn't born yet, or was fully dead, then -1 is returned. If the creature was dead, but its body still in the world, then its age on death is returned. See also TAGE.",
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "HIST TIME": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "HIST TIME (integer) world_tick (integer) Returns the time of day for a given world tick. This is the same as TIME. See also WTIK and HIST WTIK.",
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "HIST TYPE": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "HIST TYPE (integer) moniker (string) event_no (integer) For the given life event, returns its type.All histories begin with one of the following four events. You can read the associated monikers with HIST MON1 and HIST MON2.0 Conceived - a natural start to life, associated monikers are the mother's and father's1 Spliced - created using GENE CROS to crossover the two associated monikers2 Engineered - from a human made genome with GENE LOAD, the first associated moniker is blank, and the second is the filename14 Cloned - such as when importing a creature that already exists in the world and real",
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "HIST UTXT": {
    "args": [
      "string",
      "integer",
      "string"
    ],
    "returns": "string",
    "kinds": [
      "command",
      "reporter"
    ],
    "description": "HIST UTXT (string) moniker (string) event_no (integer) For the given life event, returns the user text.",
    "validation": {
      "arity": 3,
      "types": [
        "string",
        "integer",
        "string"
      ]
    }
  },
  "HIST VARI": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "HIST VARI (integer) moniker (string) Returns the variant that the creature with the given moniker has or had. If the creature hasn't been born yet, returns -1.",
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "HIST WIPE": {
    "args": [
      "string"
    ],
    "kinds": [
      "command"
    ],
    "description": "HIST WIPE (command) moniker (string) Purge the creature history for the given moniker. Only applies if the genome isn't referenced by any slot, and the creature is fully dead or exported. Use OOWW to test this first.",
    "validation": {
      "arity": 1,
      "types": [
        "string"
      ]
    }
  },
  "HIST WNAM": {
    "returns": "string",
    "kinds": [
      "reporter"
    ],
    "description": "HIST WNAM (string) moniker (string) event_no (integer) Returns the name of the world the given life event happened in.",
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "HIST WTIK": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "HIST WTIK (integer) moniker (string) event_no (integer) Returns the world tick when the life event happened, for the world that the event happened in.",
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "HIST WUID": {
    "returns": "string",
    "kinds": [
      "reporter"
    ],
    "description": "HIST WUID (string) moniker (string) event_no (integer) Returns the unique identifier of the world the given life event happened in.",
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "HIST WVET": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "HIST WVET (integer) moniker (string) Returns 1 if the Creature is a warp hole veteran, 0 otherwise. The creature is a veteran if they have ever been exported with NET: EXPO. They must have been the main exported creature - warping as an embryo doesn't make you a veteran.",
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "HIST YEAR": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "HIST YEAR (integer) world_tick (integer) Returns the number of game years elapsed for a given world tick. This is the same as YEAR. See also WTIK and HIST WTIK.",
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "HOTP": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "HOTP (integer) Returns the number of the compound part under the pointer. Returns -1 if no agent is under the pointer, and 0 if the agent is simple or a skeletal creature. Transparency of the parts is ignored, so each part is a rectangle. Transparency of the agent as a whole is, however, obeyed. Planes are also ignored, except later part numbers are treated as above earlier ones. See also HOTS to find the agent under the pointer.",
    "sources": [
      "cdn://caos.html#HOTP"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "HOTS": {
    "returns": "agent",
    "kinds": [
      "reporter"
    ],
    "description": "HOTS (agent) Returns the agent nearest the screen under the hotspot of the pointer. For each agent, TRAN decides whether this allows for transparent pixels. See also HOTP, which does the same for compound parts.",
    "sources": [
      "cdn://caos.html#HOTS"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "IITT": {
    "returns": "agent",
    "kinds": [
      "reporter"
    ],
    "description": "IITT (agent) Returns the target creature's current agent of attention. Compare _IT_.",
    "sources": [
      "cdn://caos.html#IITT"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "IMSK": {
    "args": [
      "integer"
    ],
    "returns": "integer",
    "kinds": [
      "command",
      "reporter"
    ],
    "description": "IMSK (integer) Returns the input event mask.",
    "sources": [
      "cdn://caos.html#IMSK"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "integer"
      ]
    }
  },
  "INJR": {
    "args": [
      "integer",
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "INJR (command) organ (integer) amount (integer) Injures an organ, -1 to randomly choose the organ, 0 for the body organ.",
    "sources": [
      "cdn://caos.html#INJR"
    ],
    "validation": {
      "arity": 2,
      "types": [
        "integer",
        "integer"
      ]
    }
  },
  "INNF": {
    "returns": "float",
    "kinds": [
      "reporter"
    ],
    "description": "INNF (float) Retrieves a float from the input stream, delimited by white space. Defaults to 0.0 if no valid data.",
    "sources": [
      "cdn://caos.html#INNF"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "INNI": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "INNI (integer) Retrieves an integer from the input stream, delimited by white space. Defaults to 0 if no valid data.",
    "sources": [
      "cdn://caos.html#INNI"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "INNL": {
    "returns": "string",
    "kinds": [
      "reporter"
    ],
    "description": "INNL (string) Retrieves a line of text from the input stream.",
    "sources": [
      "cdn://caos.html#INNL"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "INOK": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "INOK (integer) Returns 1 if the input stream is good, or 0 if it is bad. A bad stream could be a non existent file, or the end of file reached. If the stream has never been opened at all, an error is displayed.",
    "sources": [
      "cdn://caos.html#INOK"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "INS#": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "INS# (integer) Number of instincts still queued to be processed.",
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "INST": {
    "args": [],
    "returns": null,
    "description": "Begin atomic (instant) execution mode",
    "notes": "Subsequent commands run in one tick until SLOW or a blocking operation occurs",
    "kinds": [
      "command"
    ],
    "sources": [
      "cdn://caos.html#INST"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "ITOF": {
    "returns": "float",
    "kinds": [
      "reporter"
    ],
    "description": "ITOF (float) number_to_convert (integer) Converts an integer value into its floating-point equivalent.",
    "sources": [
      "cdn://caos.html#ITOF"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "JECT": {
    "args": [
      "string",
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "JECT (command) cos_file (string) flags (integer) Injects a COS file from the bootstrap directory. The file is searched for (case insensitively) in all bootstrap subdirectories. You must specify the file extension (it doesn't have to be .cos). Flags is a combination of what you want to inject:1 - Remove sctipt2 - Event scripts4 - Install scriptThe scripts (if present) are injected in that order. So, setting flags to 7 will fully uninstall and reinstall the cos file. Error messages and output are written to the current output stream.",
    "sources": [
      "cdn://caos.html#JECT"
    ],
    "validation": {
      "arity": 2,
      "types": [
        "string",
        "integer"
      ]
    }
  },
  "KEYD": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "KEYD (integer) keycode (integer) Returns 1 if the specified key is currently pressed down, 0 if not.",
    "sources": [
      "cdn://caos.html#KEYD"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "KILL": {
    "args": [
      "agent (agent)"
    ],
    "returns": null,
    "description": "Destroy an agent (remove it from world)",
    "notes": "Should not be used on creatures until after DEAD; on non-creatures, removes agent immediately",
    "kinds": [
      "command"
    ],
    "sources": [
      "cdn://caos.html#KILL"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "agent (agent)"
      ]
    }
  },
  "LEFT": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "LEFT (integer) Returns the value of the left constant.",
    "sources": [
      "cdn://caos.html#LEFT"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "LIKE": {
    "args": [
      "agent"
    ],
    "kinds": [
      "command"
    ],
    "description": "LIKE (command) creature_state_opinion_about (agent) State a personal opinion about a creature.",
    "sources": [
      "cdn://caos.html#LIKE"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "agent"
      ]
    }
  },
  "LIMB": {
    "returns": "string",
    "kinds": [
      "reporter"
    ],
    "description": "LIMB (string) body_part (integer) genus (integer) gender (integer) age (integer) variant (integer) Returns the filename for the specified part of a creature. If the exact part isn't present, a 'nearby' file which is on the disk is returned.",
    "sources": [
      "cdn://caos.html#LIMB"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "LINE": {
    "args": [
      "integer",
      "integer",
      "integer",
      "integer",
      "integer",
      "integer",
      "integer",
      "integer",
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "LINE (command) x1 (integer) y1 (integer) x2 (integer) y2 (integer) r (integer) g (integer) b (integer) stipple_on (integer) stipple_off (integer) Adds a line to target's drawing list. The line goes between the start and end points (world coordinates) in the specified colour. Set stipple_on and stipple_off to 0 to draw a solid line, or to the number of pixels to alternate for a stippled line. To clear all the lines for an agent, call LINE with the start and end points the same.",
    "sources": [
      "cdn://caos.html#LINE"
    ],
    "validation": {
      "arity": 9,
      "types": [
        "integer",
        "integer",
        "integer",
        "integer",
        "integer",
        "integer",
        "integer",
        "integer",
        "integer"
      ]
    }
  },
  "LINK": {
    "args": [
      "integer",
      "integer",
      "integer"
    ],
    "returns": "integer",
    "kinds": [
      "command",
      "reporter"
    ],
    "description": "LINK (integer) room1 (integer) room2 (integer) Returns the permiability of the link between the rooms specified or 0 if no link exists.",
    "sources": [
      "cdn://caos.html#LINK"
    ],
    "validation": {
      "arity": 3,
      "types": [
        "integer",
        "integer",
        "integer"
      ]
    }
  },
  "LOAD": {
    "args": [
      "string"
    ],
    "kinds": [
      "command"
    ],
    "description": "LOAD (command) world_name (string) Loads the specified world at the start of the next tick. See also QUIT for important information about using INST. See BOOT and engine_no_auxiliary_bootstrap_nnn for extra information about bootstrapping a world.",
    "sources": [
      "cdn://caos.html#LOAD"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "string"
      ]
    }
  },
  "LOCI": {
    "args": [
      "integer",
      "integer",
      "integer",
      "integer",
      "float"
    ],
    "returns": "float",
    "kinds": [
      "command",
      "reporter"
    ],
    "description": "LOCI (float) type (integer) organ (integer) tissue (integer) id (integer) Reads a biochemical locus value.",
    "sources": [
      "cdn://caos.html#LOCI"
    ],
    "validation": {
      "arity": 5,
      "types": [
        "integer",
        "integer",
        "integer",
        "integer",
        "float"
      ]
    }
  },
  "LOCK": {
    "kinds": [
      "command"
    ],
    "description": "LOCK (command) Prevent the current script being interrupted until UNLK. Normally, events other than timer scripts interrupt (abort) currently running scripts. You can also use INST for similar, stronger protection.",
    "sources": [
      "cdn://caos.html#LOCK"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "LOFT": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "LOFT (integer) filename (string) Declares that you have finished with a photograph image file taken by SNAP. If the file is in use in a gallery, this function fails and returns 1. Otherwise it returns 0. The file will be marked for the attic, and moved there later.",
    "sources": [
      "cdn://caos.html#LOFT"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "LOOP": {
    "kinds": [
      "command"
    ],
    "description": "LOOP (command) Begin a LOOP..UNTL or LOOP..EVER loop.",
    "sources": [
      "cdn://caos.html#LOOP"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "LORP": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "LORP (integer) room_id (integer) ca_index (integer) directions (integer) Returns id of the room adjacent to this one with the lowest concentration of the given CA. direction is 0 for left/right, 1 for any direction.",
    "sources": [
      "cdn://caos.html#LORP"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "LOWA": {
    "returns": "string",
    "kinds": [
      "reporter"
    ],
    "description": "LOWA (string) any_old (string) Converts the given string into all lower case letters.",
    "sources": [
      "cdn://caos.html#LOWA"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "LTCY": {
    "args": [
      "integer",
      "integer",
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "LTCY (command) action (integer) min (integer) max (integer) Sets latency time on involuntary actions to a random value between min and max. After an involuntary action occurs, the same action will not be able to kick in again until after that many ticks. Min and max must range between 0 and 255.",
    "sources": [
      "cdn://caos.html#LTCY"
    ],
    "validation": {
      "arity": 3,
      "types": [
        "integer",
        "integer",
        "integer"
      ]
    }
  },
  "MAME": {
    "returns": "variable",
    "kinds": [
      "reporter"
    ],
    "description": "MAME (variable) variable_name (anything) Machine variable version of NAME. Accesses the same variables, only via OWNR rather than TARG. This is the same difference as between MVxx and OVxx.",
    "sources": [
      "cdn://caos.html#MAME"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "MANN": {
    "args": [
      "string"
    ],
    "kinds": [
      "command"
    ],
    "description": "MANN (command) command (string) Outputs help on the given command to the output stream.",
    "sources": [
      "cdn://caos.html#MANN"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "string"
      ]
    }
  },
  "MAPD": {
    "args": [
      "integer",
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "MAPD (command) width (integer) height (integer) Sets the dimensions of the map. These are the maximum world coordinates. Metarooms are rectangles within this area.",
    "sources": [
      "cdn://caos.html#MAPD"
    ],
    "validation": {
      "arity": 2,
      "types": [
        "integer",
        "integer"
      ]
    }
  },
  "MAPH": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "MAPH (integer) Returns the total height of the map.",
    "sources": [
      "cdn://caos.html#MAPH"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "MAPK": {
    "kinds": [
      "command"
    ],
    "description": "MAPK (command) Resets the map to be empty.",
    "sources": [
      "cdn://caos.html#MAPK"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "MAPW": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "MAPW (integer) Returns the total width of the map.",
    "sources": [
      "cdn://caos.html#MAPW"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "MATE": {
    "kinds": [
      "command"
    ],
    "description": "MATE (command) Male creature mates with the IT agent - if IT is a female of the same genus! The female doesn't need to be in reach. If successful, the sperm is transmitted to the female and there is a chance of conception. If pregnancy occurs, gene slot 1 of the mother contains the genome of the child.",
    "sources": [
      "cdn://caos.html#MATE"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "MCLR": {
    "args": [
      "integer",
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "MCLR (command) x (integer) y (integer) Clear the music for the metaroom at the given location.",
    "sources": [
      "cdn://caos.html#MCLR"
    ],
    "validation": {
      "arity": 2,
      "types": [
        "integer",
        "integer"
      ]
    }
  },
  "MEMX": {
    "kinds": [
      "command"
    ],
    "description": "MEMX (command) Windows only. Sends information about the memory allocated to the output stream. In order, these are the Memory Load (unknown), Total Physical (size in bytes of physical memory), Available Physical (free physical space), Total Page File (maximum possible size of page file), Available Page File (size in bytes of space available in paging file), Total Virtual (size of user mode portion of the virtual address space of the engine), Available Virtual (size of unreserved and uncommitted memory in the user mode portion of the virtual address space of the engine).",
    "sources": [
      "cdn://caos.html#MEMX"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "MESG WRIT": {
    "args": [
      "agent (agent)",
      "message_id (int)"
    ],
    "returns": null,
    "description": "Send a message to another agent (no parameters)",
    "notes": "Triggers the script on the target agent with given message number (0\u2013255 reserved for engine or custom >255)",
    "kinds": [
      "command"
    ],
    "validation": {
      "arity": 2,
      "types": [
        "agent (agent)",
        "message_id (int)"
      ]
    }
  },
  "MESG WRT+": {
    "args": [
      "agent (agent)",
      "message_id (int)",
      "P1 (any)",
      "P2 (any)",
      "delay (int)"
    ],
    "returns": null,
    "description": "Send a deferred message with two parameters",
    "notes": "Executes target\u2019s script after `delay` ticks, delivering _P1_ and _P2_ as parameters",
    "kinds": [
      "command"
    ],
    "validation": {
      "arity": 5,
      "types": [
        "agent (agent)",
        "message_id (int)",
        "P1 (any)",
        "P2 (any)",
        "delay (int)"
      ]
    }
  },
  "META": {
    "args": [
      "integer",
      "integer",
      "integer",
      "integer"
    ],
    "returns": "integer",
    "kinds": [
      "command",
      "reporter"
    ],
    "description": "META (integer) Returns the metaroom id that the current camera is looking at.",
    "sources": [
      "cdn://caos.html#META"
    ],
    "validation": {
      "arity": 4,
      "types": [
        "integer",
        "integer",
        "integer",
        "integer"
      ]
    }
  },
  "MIDI": {
    "args": [
      "string"
    ],
    "kinds": [
      "command"
    ],
    "description": "MIDI (command) midi_file (string) Plays a MIDI file. Set to an empty string to stop the MIDI player.",
    "sources": [
      "cdn://caos.html#MIDI"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "string"
      ]
    }
  },
  "MIND": {
    "args": [
      "integer"
    ],
    "returns": "integer",
    "kinds": [
      "command",
      "reporter"
    ],
    "description": "MIND (integer) Returns whether the creature TARG's brain is being processed or not.",
    "sources": [
      "cdn://caos.html#MIND"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "integer"
      ]
    }
  },
  "MIRA": {
    "args": [
      "integer"
    ],
    "returns": "integer",
    "kinds": [
      "command",
      "reporter"
    ],
    "description": "MIRA (integer) Is the current sprite for this agent mirrored (returns 1) or not (returns 0)",
    "sources": [
      "cdn://caos.html#MIRA"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "integer"
      ]
    }
  },
  "MLOC": {
    "returns": "string",
    "kinds": [
      "reporter"
    ],
    "description": "MLOC (string) metaroom_id (integer) Returns the location of the specified metaroom as a string formated as follows: x y width height.",
    "sources": [
      "cdn://caos.html#MLOC"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "MMSC": {
    "args": [
      "integer",
      "integer",
      "string"
    ],
    "returns": "string",
    "kinds": [
      "command",
      "reporter"
    ],
    "description": "MMSC (string) x (integer) y (integer) Returns the name of the music track played at the metaroom in the given location.",
    "sources": [
      "cdn://caos.html#MMSC"
    ],
    "validation": {
      "arity": 3,
      "types": [
        "integer",
        "integer",
        "string"
      ]
    }
  },
  "MODU": {
    "returns": "string",
    "kinds": [
      "reporter"
    ],
    "description": "MODU (string) Returns a string listed the loaded modules, and the display engine type. You can use SINS to parse this for particular values.",
    "sources": [
      "cdn://caos.html#MODU"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "MODV": {
    "args": [
      "variable",
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "MODV (command) var (variable) mod (integer) Gives the remainder (or modulus) when a variable is divided by an integer, so var = var % mod. Both values should to be integers.",
    "sources": [
      "cdn://caos.html#MODV"
    ],
    "validation": {
      "arity": 2,
      "types": [
        "variable",
        "integer"
      ]
    }
  },
  "MONT": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "MONT (integer) Returns the month of the year",
    "sources": [
      "cdn://caos.html#MONT"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "MOPX": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "MOPX (integer) Returns x position of mouse in world coordinates.",
    "sources": [
      "cdn://caos.html#MOPX"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "MOPY": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "MOPY (integer) Returns y position of mouse in world coordinates.",
    "sources": [
      "cdn://caos.html#MOPY"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "MOTR": {
    "args": [
      "integer"
    ],
    "returns": "integer",
    "kinds": [
      "command",
      "reporter"
    ],
    "description": "MOTR (integer) Returns whether the creature TARG's motor faculty is being processed or not.",
    "sources": [
      "cdn://caos.html#MOTR"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "integer"
      ]
    }
  },
  "MOUS": {
    "args": [
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "MOUS (command) behaviour (integer) Defines the behaviour of the mouse button for the default pointer behaviour - see PURE.0 is normal1 means the right button does what the left button does2 means the left button does what the right button does",
    "sources": [
      "cdn://caos.html#MOUS"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "integer"
      ]
    }
  },
  "MOVS": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "MOVS (integer) Returns the movement status of the target. 0 Autonomous1 Mouse driven2 Floating3 In vehicle4 Carried",
    "sources": [
      "cdn://caos.html#MOVS"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "MOVX": {
    "returns": "float",
    "kinds": [
      "reporter"
    ],
    "description": "MOVX (float) Returns horizontal mouse velocity.",
    "sources": [
      "cdn://caos.html#MOVX"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "MOVY": {
    "returns": "float",
    "kinds": [
      "reporter"
    ],
    "description": "MOVY (float) Returns vertical mouse velocity.",
    "sources": [
      "cdn://caos.html#MOVY"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "MOWS": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "MOWS (integer) Returns whether the lawn was cut last Sunday or not.",
    "sources": [
      "cdn://caos.html#MOWS"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "MSEC": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "MSEC (integer) Returns a time stamp measured in milliseconds. It is not specified when the time is measured from; the stamp is only guaranteed to be consistent during one session.",
    "sources": [
      "cdn://caos.html#MSEC"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "MTHX": {
    "returns": "float",
    "kinds": [
      "reporter"
    ],
    "description": "MTHX (float) This returns the X position of the TARG creature's mouth attachment point in absolute (map) coordinates.",
    "sources": [
      "cdn://caos.html#MTHX"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "MTHY": {
    "returns": "float",
    "kinds": [
      "reporter"
    ],
    "description": "MTHY (float) This returns the Y position of the TARG creature's mouth attachment point in absolute (map) coordinates.",
    "sources": [
      "cdn://caos.html#MTHY"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "MTOA": {
    "returns": "agent",
    "kinds": [
      "reporter"
    ],
    "description": "MTOA (agent) moniker (string) Returns the agent which references the given moniker. The moniker could be stored in any of the gene slots for that agent, including the special slot 0 for a creature. If the moniker is not currently used in the game, then returns NULL. This command can be slow - use MTOC if possible.",
    "sources": [
      "cdn://caos.html#MTOA"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "MTOC": {
    "returns": "agent",
    "kinds": [
      "reporter"
    ],
    "description": "MTOC (agent) moniker (string) Returns the creature with the given moniker. If there is no agent alive with that moniker, then returns NULL. See also MTOA.",
    "sources": [
      "cdn://caos.html#MTOC"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "MULV": {
    "args": [
      "variable",
      "decimal"
    ],
    "kinds": [
      "command"
    ],
    "description": "MULV (command) var (variable) mul (decimal) Multiplies a variable by an integer or float, so var = var * mul.",
    "sources": [
      "cdn://caos.html#MULV"
    ],
    "validation": {
      "arity": 2,
      "types": [
        "variable",
        "decimal"
      ]
    }
  },
  "MUTE": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "MUTE (integer) andMask (integer) eorMask (integer) This returns (and potentially sets) the mute values for the sound managers in the game. Sensible settings for the parameters are as follows:",
    "sources": [
      "cdn://caos.html#MUTE"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "MVBY": {
    "args": [
      "float",
      "float"
    ],
    "kinds": [
      "command"
    ],
    "description": "MVBY (command) delta_x (float) delta_y (float) Move the target agent by relative distances, which can be negative or positive.",
    "sources": [
      "cdn://caos.html#MVBY"
    ],
    "validation": {
      "arity": 2,
      "types": [
        "float",
        "float"
      ]
    }
  },
  "MVFT": {
    "args": [
      "x (float)",
      "y (float)"
    ],
    "returns": null,
    "description": "Move creature\u2019s down foot to (x,y) location",
    "notes": "Preferred for repositioning creatures; ensures creature remains properly in room system",
    "kinds": [
      "command"
    ],
    "sources": [
      "cdn://caos.html#MVFT"
    ],
    "validation": {
      "arity": 2,
      "types": [
        "x (float)",
        "y (float)"
      ]
    }
  },
  "MVSF": {
    "args": [
      "float",
      "float"
    ],
    "kinds": [
      "command"
    ],
    "description": "MVSF (command) x (float) y (float) Move the target agent into a safe map location somewhere in the vicinity of x, y. Only works on autonomous agents - see MOVS. Works like a safe MVFT for creatures.",
    "sources": [
      "cdn://caos.html#MVSF"
    ],
    "validation": {
      "arity": 2,
      "types": [
        "float",
        "float"
      ]
    }
  },
  "MVTO": {
    "args": [
      "x (float)",
      "y (float)"
    ],
    "returns": null,
    "description": "Move agent\u2019s top-left corner to world coordinates (x,y)",
    "notes": "For creatures, use MVFT (moves creature by feet, preserving pose)",
    "kinds": [
      "command"
    ],
    "sources": [
      "cdn://caos.html#MVTO"
    ],
    "validation": {
      "arity": 2,
      "types": [
        "x (float)",
        "y (float)"
      ]
    }
  },
  "MVXX": {
    "returns": "variable",
    "kinds": [
      "reporter"
    ],
    "description": "MVxx (variable) MV00 to MV99 are variables specific to an agent. They are read from OWNR, the owner agent of the current script. These are the exact same variables as OVxx, except read from owner not targ. If owner and targ are the same, then OV23 is MV23, for example.",
    "sources": [
      "cdn://caos.html#MVxx"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "NAME": {
    "returns": "variable",
    "kinds": [
      "reporter"
    ],
    "description": "NAME (variable) variable_name (anything) This is a named variable, similar to a GAME variable, only local to the target agent. See also MAME. The \"name\" of the variable is not limited to strings, but can be anything stored in a variable. i.e. integer, float, string, even an agent.",
    "sources": [
      "cdn://caos.html#NAME"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "NAMN": {
    "args": [
      "variable"
    ],
    "kinds": [
      "command"
    ],
    "description": "NAMN (command) previous (variable) Enumerates through NAME variable names, roughly as GAMN does through GAME variables. Start and end with an empty string.",
    "sources": [
      "cdn://caos.html#NAMN"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "variable"
      ]
    }
  },
  "NCLS": {
    "returns": "agent",
    "kinds": [
      "reporter"
    ],
    "description": "NCLS (agent) previous (agent) family (integer) genus (integer) species (integer) Finds the next agent in the agent list which also matches the given classifier. If the previous agent doesn't exist or doesn't match the classifier then the first agent matching it is returned. If none match the classifier, then NULL is returned.",
    "sources": [
      "cdn://caos.html#NCLS"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "NEGV": {
    "args": [
      "variable"
    ],
    "kinds": [
      "command"
    ],
    "description": "NEGV (command) var (variable) Reverse the sign of the given integer or float variable, so var = 0 - var.",
    "sources": [
      "cdn://caos.html#NEGV"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "variable"
      ]
    }
  },
  "NET: ERRA": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "NET: ERRA (integer) Returns an error code from the last command. Currently NET: LINE is the only command to set it.Error codes are:0 - Unknown1 - Connection OK2 - Connection failed, you or the server are offline3 - Connection failed, invalid user name/password4 - Connection failed, you are already logged in elsewhere5 - Connection failed, too many users for server6 - Connection failed, internal error7 - Connection failed, new client version required.Try NET: RAWE for more detailed diagnostic codes.",
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "NET: EXPO": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "NET: EXPO (integer) chunk_type (string) dest_user_id (string) Transwarp the target creature to the given user. The Creature is exported to the warp out directory; this command is very similar to PRAY EXPO. Return value is one of the following:0 for success1 if the creature, or if pregnant any of its offspring, are already on disk in some form. This case won't happen much, if you use a special chunk name like WARP.2 if the user hasn't been online in this world yet / since the user name changed, so we don't know who they are.When receiving a creature, use NET: FROM to find out who sent it.",
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "NET: FROM": {
    "returns": "string",
    "kinds": [
      "reporter"
    ],
    "description": "NET: FROM (string) resource_name (string) The user who sent the PRAY file which contains the specified resource. If the resource did not arrive as a message over the network via NET: MAKE or NET: EXPO, then this returns an empty string. The user returned by this command is guaranteed in a way that looking at the content of the PRAY file would not be. For example, the \"Last Network User\" attribute in an exported Creature made with NET: EXPO could be faked.",
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "NET: HEAD": {
    "kinds": [
      "command"
    ],
    "description": "NET: HEAD (command) Dump debugging informatino about who is NET: HEARing on what channels.",
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "NET: HEAR": {
    "args": [
      "string"
    ],
    "kinds": [
      "command"
    ],
    "description": "NET: HEAR (command) channel (string) The target agent will now accept CAOS messages over the network on the specified channel, and execute their script as appropriate. Use NET: WRIT to send the message.",
    "validation": {
      "arity": 1,
      "types": [
        "string"
      ]
    }
  },
  "NET: HOST": {
    "returns": "string",
    "kinds": [
      "reporter"
    ],
    "description": "NET: HOST (string) Returns the hostname, port, id and friendly name on that host that we are currently connected to, or empty string if offline. The fields are space separated, although the last field (friendly name) may contain spaces.",
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "NET: LINE": {
    "args": [
      "integer"
    ],
    "returns": "integer",
    "kinds": [
      "command",
      "reporter"
    ],
    "description": "NET: LINE (integer) Returns 1 if you are connected to the Babel server, or 0 if you aren't.",
    "validation": {
      "arity": 1,
      "types": [
        "integer"
      ]
    }
  },
  "NET: MAKE": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "NET: MAKE (integer) which_journal_spot (integer) journal_name (string) user (string) report_destination (variable) Like PRAY MAKE, only sends the made pray file to the specified user. This will arrive in their inbox, where it can be read with normal PRAY commands and deleted with PRAY KILL.",
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "NET: PASS": {
    "args": [
      "string",
      "string"
    ],
    "returns": "string",
    "kinds": [
      "command",
      "reporter"
    ],
    "description": "NET: PASS (string) Returns the currently set username, as selected with PASS.",
    "validation": {
      "arity": 2,
      "types": [
        "string",
        "string"
      ]
    }
  },
  "NET: RAWE": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "NET: RAWE (integer) Returns an internal error code from Babel. Only use this for display and diagnostic purpose, use NET: ERRA for documented error codes which you can rely on.",
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "NET: RUSO": {
    "args": [
      "variable"
    ],
    "kinds": [
      "command"
    ],
    "description": "NET: RUSO (command) store_result (variable) Returns (into store_result) a random user who is currently online. Returns an empty string if you're offline, or if you aren't using the Docking Station Babel server module. Since you're online, it can return yourself (especially if you're the only person online!). The user is also only likely to be online - they could have gone offline since the server replied to you.This is a command rather than an integer r-value because it is blocking. This means that it might take several ticks before the server returns the result. In this sense it is similar to",
    "validation": {
      "arity": 1,
      "types": [
        "variable"
      ]
    }
  },
  "NET: STAT": {
    "args": [
      "variable",
      "variable",
      "variable",
      "variable"
    ],
    "kinds": [
      "command"
    ],
    "description": "NET: STAT (command) time_online (variable) users_online (variable) bytes_received (variable) bytes_sent (variable) Returns statistics for the current Babel connection, or -1 if offline. This command can block (doesn't execute in an INST). The statistics are:time_online - Time online in millisecondsusers_online - Number of users currently connected to the serverbytes_received - Bytes received by the clientbytes_sent - Bytes sent from the client",
    "validation": {
      "arity": 4,
      "types": [
        "variable",
        "variable",
        "variable",
        "variable"
      ]
    }
  },
  "NET: ULIN": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "NET: ULIN (integer) user_id (string) Returns 1 if the specified user is online, or 0 if they are offline. This is slow (i.e. has to call the server) unless the user is in the whose wanted register of any agent. Use NET: WHON to add a user to the register.",
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "NET: UNIK": {
    "args": [
      "string",
      "variable"
    ],
    "kinds": [
      "command"
    ],
    "description": "NET: UNIK (command) user_id (string) store_result (variable) Returns the specified user's screen or nick name. Returns empty string if offline, or no such user. This command can take many ticks to execute while the server is quizzed, like NET: RUSO.",
    "validation": {
      "arity": 2,
      "types": [
        "string",
        "variable"
      ]
    }
  },
  "NET: USER": {
    "returns": "string",
    "kinds": [
      "reporter"
    ],
    "description": "NET: USER (string) Returns the user's numeric Babel id, or an empty string if they have never logged in with this world since they last changed user name.",
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "NET: WHAT": {
    "returns": "string",
    "kinds": [
      "reporter"
    ],
    "description": "NET: WHAT (string) For debugging only. Returns a string describing what the upload/query network thread is currently doing. For example, it may be fetching a random online user, or uploading some creature history. Returns an emptry string if it is doing nothing.",
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "NET: WHOD": {
    "kinds": [
      "command"
    ],
    "description": "NET: WHOD (command) Dump debugging information about the whose wanted register.",
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "NET: WHOF": {
    "args": [
      "string"
    ],
    "kinds": [
      "command"
    ],
    "description": "NET: WHOF (command) user (string) Removes a user from the whose wanted list for the target agent. See NET: WHON.",
    "validation": {
      "arity": 1,
      "types": [
        "string"
      ]
    }
  },
  "NET: WHON": {
    "args": [
      "string"
    ],
    "kinds": [
      "command"
    ],
    "description": "NET: WHON (command) user (string) Add a user to the whose wanted register for the target agent. Scripts User Online and User Offline are now called on this agent when that user goes on or offline, or indeed when the local user goes offline. Use NET: WHOF to remove them from the register. This command is blocking, it can take several ticks to return.",
    "validation": {
      "arity": 1,
      "types": [
        "string"
      ]
    }
  },
  "NET: WHOZ": {
    "kinds": [
      "command"
    ],
    "description": "NET: WHOZ (command) Zap the target agent's whose wanted register, removing all entries.",
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "NET: WRIT": {
    "args": [
      "string",
      "string",
      "integer",
      "anything",
      "anything"
    ],
    "kinds": [
      "command"
    ],
    "description": "NET: WRIT (command) user_id (string) channel (string) message_id (integer) param_1 (anything) param_2 (anything) Send a message to a remote machine, as specified by the user identifier. All agents which are NET: HEARing on the given channel will receive the message, and run the appropriate script. If the specified user is offline, then the message is discarded. The FROM variable of the receiving script contains the user id of the sender, as a string. See also MESG WRIT.",
    "validation": {
      "arity": 5,
      "types": [
        "string",
        "string",
        "integer",
        "anything",
        "anything"
      ]
    }
  },
  "NEW: COMP": {
    "args": [
      "family (int)",
      "genus (int)",
      "species (int)",
      "sprite_file (str)",
      "image_count (int)",
      "first_image (int)",
      "plane (int)"
    ],
    "returns": null,
    "description": "Create a new compound agent (multi-part)",
    "notes": "Initializes a compound agent with one base part; use PAT: commands to add parts",
    "kinds": [
      "command"
    ],
    "validation": {
      "arity": 7,
      "types": [
        "family (int)",
        "genus (int)",
        "species (int)",
        "sprite_file (str)",
        "image_count (int)",
        "first_image (int)",
        "plane (int)"
      ]
    }
  },
  "NEW: CRAG": {
    "args": [
      "integer",
      "agent",
      "integer",
      "integer",
      "integer",
      "string",
      "integer",
      "integer",
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "NEW: CRAG (command) family (integer) gene_agent (agent) gene_slot (integer) sex (integer) variant (integer) sprite_file (string) image_count (integer) first_image (integer) plane (integer) Makes a non-skeletal creature. The first five arguments are the same as NEW: CREA. The last four, starting from the sprite file, are exactly as in NEW: COMP.",
    "validation": {
      "arity": 9,
      "types": [
        "integer",
        "agent",
        "integer",
        "integer",
        "integer",
        "string",
        "integer",
        "integer",
        "integer"
      ]
    }
  },
  "NEW: CREA": {
    "args": [
      "family (int)",
      "gene_agent (agent)",
      "gene_slot (int)",
      "sex (int)",
      "variant (int)"
    ],
    "returns": null,
    "description": "Create a new creature from a genome in given slot",
    "notes": "Clears the gene slot (moves genome to creature\u2019s slot 0); sex: 1=male, 2=female, 0=random",
    "kinds": [
      "command"
    ],
    "validation": {
      "arity": 5,
      "types": [
        "family (int)",
        "gene_agent (agent)",
        "gene_slot (int)",
        "sex (int)",
        "variant (int)"
      ]
    }
  },
  "NEW: SIMP": {
    "args": [
      "family (int)",
      "genus (int)",
      "species (int)",
      "sprite_file (str)",
      "image_count (int)",
      "first_image (int)",
      "plane (int)"
    ],
    "returns": null,
    "description": "Create a new simple agent (one-part object)",
    "notes": "Must be in INST block for atomic creation; sets up one automatic part with given sprite frames",
    "kinds": [
      "command"
    ],
    "validation": {
      "arity": 7,
      "types": [
        "family (int)",
        "genus (int)",
        "species (int)",
        "sprite_file (str)",
        "image_count (int)",
        "first_image (int)",
        "plane (int)"
      ]
    }
  },
  "NEW: VHCL": {
    "args": [
      "integer",
      "integer",
      "integer",
      "string",
      "integer",
      "integer",
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "NEW: VHCL (command) family (integer) genus (integer) species (integer) sprite_file (string) image_count (integer) first_image (integer) plane (integer) Create a new vehicle. Parameters are the same as NEW: COMP.",
    "validation": {
      "arity": 7,
      "types": [
        "integer",
        "integer",
        "integer",
        "string",
        "integer",
        "integer",
        "integer"
      ]
    }
  },
  "NEWC": {
    "args": [
      "family (int)",
      "gene_agent (agent)",
      "gene_slot (int)",
      "sex (int)",
      "variant (int)"
    ],
    "returns": null,
    "description": "Like NEW: CREA but spread over ticks to reduce lag",
    "notes": "Cannot be used in install scripts (only runtime); helps avoid frame hiccup when creating creatures",
    "kinds": [
      "command"
    ],
    "sources": [
      "cdn://caos.html#NEWC"
    ],
    "validation": {
      "arity": 5,
      "types": [
        "family (int)",
        "gene_agent (agent)",
        "gene_slot (int)",
        "sex (int)",
        "variant (int)"
      ]
    }
  },
  "NEXT": {
    "args": [],
    "returns": null,
    "description": "End an ENUM/ESEE/ETCH/EPAS enumeration loop",
    "notes": "Terminates a block of code that iterates over agents via ENUM/ESEE/etc",
    "kinds": [
      "command"
    ],
    "sources": [
      "cdn://caos.html#NEXT"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "NOHH": {
    "kinds": [
      "command"
    ],
    "description": "NOHH (command) Tell the creature to immediately stop holding hands with the pointer. Useful when you are about to teleport a norn, it prevents the pointer from continuosly changing his position back to where it was.",
    "sources": [
      "cdn://caos.html#NOHH"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "NORN": {
    "args": [
      "agent"
    ],
    "returns": "agent",
    "kinds": [
      "command",
      "reporter"
    ],
    "description": "NORN (agent) Returns the creature currently selected by the user.",
    "sources": [
      "cdn://caos.html#NORN"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "agent"
      ]
    }
  },
  "NOTV": {
    "args": [
      "variable"
    ],
    "kinds": [
      "command"
    ],
    "description": "NOTV (command) var (variable) Peform a bitwise NOT on an integer variable.",
    "sources": [
      "cdn://caos.html#NOTV"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "variable"
      ]
    }
  },
  "NPGS": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "NPGS (integer) Returns the number of available pages for current text part.",
    "sources": [
      "cdn://caos.html#NPGS"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "NUDE": {
    "kinds": [
      "command"
    ],
    "description": "NUDE (command) Removes all clothes from a creature. Any changed layer 0 will revert to drawing the body part again. See WEAR.",
    "sources": [
      "cdn://caos.html#NUDE"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "NULL": {
    "returns": "agent",
    "kinds": [
      "reporter"
    ],
    "description": "NULL (agent) Returns a null agent pointer.",
    "sources": [
      "cdn://caos.html#NULL"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "NWLD": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "NWLD (integer) Returns the number of world directories.",
    "sources": [
      "cdn://caos.html#NWLD"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "OBST": {
    "returns": "float",
    "kinds": [
      "reporter"
    ],
    "description": "OBST (float) direction (integer) Returns the distance from the agent to the nearest wall that it might collide with in the given direction. Directions are LEFT, RGHT, _UP_, or DOWN. If the distance to the collsion is greater than RNGE then a very large number is returned.",
    "sources": [
      "cdn://caos.html#OBST"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "OOWW": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "OOWW (integer) moniker (string) Returns the status of the moniker.0 - never existed, or history purged1 - genome referenced by a slot, for example an egg2 - creature made with NEW: CREA3 - creature properly BORN4 - out of world, exported5 - dead, body still exists6 - dead, body KILLed7 - unreferenced genome",
    "sources": [
      "cdn://caos.html#OOWW"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "ORDR SHOU": {
    "args": [
      "string"
    ],
    "kinds": [
      "command"
    ],
    "description": "ORDR SHOU (command) speech (string) Sends a spoken command from target to all creatures that can hear it. As well as the usual speech that Creatures can understand, there is a special syntax that can be used for learning machines. This is as follows:learn|perfect verb|noun|drive|qualifier|special|personal|nice_drive [number] [word] Here the | means \"or\", the [number] is the id slot to learn, and [word] is the new text to fill that word in with. \"perfect\" makes the Creature learn it perfectly straight away, whereas \"learn\" does a gradually learning. See the Creatures 3 learning machine cos file",
    "validation": {
      "arity": 1,
      "types": [
        "string"
      ]
    }
  },
  "ORDR SIGN": {
    "args": [
      "string"
    ],
    "kinds": [
      "command"
    ],
    "description": "ORDR SIGN (command) speech (string) Sends a spoken command from target to all creatures that can see it.",
    "validation": {
      "arity": 1,
      "types": [
        "string"
      ]
    }
  },
  "ORDR TACT": {
    "args": [
      "string"
    ],
    "kinds": [
      "command"
    ],
    "description": "ORDR TACT (command) speech (string) Sends a spoken command from target to all creatures that are touching it.",
    "validation": {
      "arity": 1,
      "types": [
        "string"
      ]
    }
  },
  "ORDR WRIT": {
    "args": [
      "agent",
      "string"
    ],
    "kinds": [
      "command"
    ],
    "description": "ORDR WRIT (command) creature (agent) speech (string) Sends a spoken command from target to the specified creature.",
    "validation": {
      "arity": 2,
      "types": [
        "agent",
        "string"
      ]
    }
  },
  "ORGF": {
    "returns": "float",
    "kinds": [
      "reporter"
    ],
    "description": "ORGF (float) organ_number (integer) data (integer) Returns floating point data about the specified organ. The organ number is from 0 to ORGN - 1. The data parameter specifies what information is returned:0 - Clock rate in updates per tick (as locus)1 - Short term life force as a proportion of intial (as locus)2 - Factor to modulate rate of repair (as locus)3 - Injury to apply (as locus)4 - Initial life force, a million is the largest initial value5 - Short term life force, temporary damage6 - Long term life force, permanent damage7 - Long term rate damage during repair8 - Energy cost to run th",
    "sources": [
      "cdn://caos.html#ORGF"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "ORGI": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "ORGI (integer) organ_number (integer) data (integer) Returns integer data about the specified organ. The organ number is from 0 to ORGN - 1. The data parameter specifies what information is returned:0 - receptor count1 - emitter count2 - reaction count.",
    "sources": [
      "cdn://caos.html#ORGI"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "ORGN": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "ORGN (integer) Returns the number of organs in target creature.",
    "sources": [
      "cdn://caos.html#ORGN"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "ORRV": {
    "args": [
      "variable",
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "ORRV (command) var (variable) value (integer) Peform a bitwise OR on an integer variable, so var = var | value.",
    "sources": [
      "cdn://caos.html#ORRV"
    ],
    "validation": {
      "arity": 2,
      "types": [
        "variable",
        "integer"
      ]
    }
  },
  "OUTS": {
    "args": [
      "string"
    ],
    "kinds": [
      "command"
    ],
    "description": "OUTS (command) text (string) Sends a string to the output stream. When running a script, the stream is null and this command does nothing. For an externally injected command, the data from the stream is returned to the calling process. For the CAOS command, the text is returned as a string. You can use FILE OOPE to set the stream to a journal file.",
    "sources": [
      "cdn://caos.html#OUTS"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "string"
      ]
    }
  },
  "OUTV": {
    "args": [
      "decimal"
    ],
    "kinds": [
      "command"
    ],
    "description": "OUTV (command) value (decimal) Similar to OUTS only outputs a float or integer as a decimal string.",
    "sources": [
      "cdn://caos.html#OUTV"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "decimal"
      ]
    }
  },
  "OUTX": {
    "args": [
      "string"
    ],
    "kinds": [
      "command"
    ],
    "description": "OUTX (command) text (string) This sends the string text to the output stream. However it first transforms any escapes into quoted escapes, and it also quotes the entire string for you.e.g.:outx \"Moooose\\n\"Would produce:\"Moooose\\n\"on the output stream instead of:Moooose",
    "sources": [
      "cdn://caos.html#OUTX"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "string"
      ]
    }
  },
  "OVER": {
    "kinds": [
      "command"
    ],
    "description": "OVER (command) Wait until the current agent/part's ANIMation is over before continuing. Looping anims stop this command terminating until the animation is changed to a non-looping one.",
    "sources": [
      "cdn://caos.html#OVER"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "OVXX": {
    "returns": "variable",
    "kinds": [
      "reporter"
    ],
    "description": "OVxx (variable) OV00 to OV99 are variables specific to an agent. They are read from TARG, the target agent. You can also access these same variables via owner using MVxx.",
    "sources": [
      "cdn://caos.html#OVxx"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "OWNR": {
    "returns": "agent",
    "kinds": [
      "reporter"
    ],
    "description": "OWNR (agent) Returns the agent who's virtual machine the script is running on. Returns NULL for injected or install scripts.",
    "sources": [
      "cdn://caos.html#OWNR"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "PACE": {
    "returns": "float",
    "kinds": [
      "reporter"
    ],
    "description": "PACE (float) Returns the tick rate satisfaction factor.Factor 1 - ticks are taking the time we would expect them to, which is set by BUZZ.Factor more than 1 - the engine is running too slowly.Factor less than 1 - the engine is leaving spare processing time.This is averaged over the last 10 ticks.Agents can look at this to adjust the resources they use according to current spare processing time. For example, if you have a random snowflake generator in winter, you could increase the chance of generation if PACE is low, and decrease the chance if PACE is high. When you do this remember that compu",
    "sources": [
      "cdn://caos.html#PACE"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "PAGE": {
    "args": [
      "integer"
    ],
    "returns": "integer",
    "kinds": [
      "command",
      "reporter"
    ],
    "description": "PAGE (integer) Returns the current page for current text part. See the PAGE command for more information.",
    "sources": [
      "cdn://caos.html#PAGE"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "integer"
      ]
    }
  },
  "PART": {
    "args": [
      "integer"
    ],
    "returns": "integer",
    "kinds": [
      "command",
      "reporter"
    ],
    "description": "PART (integer) part_id (integer) Returns 1 if the given part number exists on the TARG agent and 0 if it does not.",
    "sources": [
      "cdn://caos.html#PART"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "integer"
      ]
    }
  },
  "PAT: BUTT": {
    "args": [
      "integer",
      "string",
      "integer",
      "integer",
      "decimal",
      "decimal",
      "integer",
      "byte-string",
      "integer",
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "PAT: BUTT (command) part_id (integer) sprite_file (string) first_image (integer) image_count (integer) rel_x (decimal) rel_y (decimal) rel_plane (integer) anim_hover (byte-string) message_id (integer) option (integer) Create a button on a compound agent. anim_hover is an animation, as in the ANIM command, to use when the mouse is over the button - when the mouse is moved off, it returns to any previous animation that was going. message_id is sent when the button is clicked. option is 0 for the mouse to hit anywhere in the bounding box, 1 to hit only non-transparent pixels._P1_ of the message i",
    "validation": {
      "arity": 10,
      "types": [
        "integer",
        "string",
        "integer",
        "integer",
        "decimal",
        "decimal",
        "integer",
        "byte-string",
        "integer",
        "integer"
      ]
    }
  },
  "PAT: CMRA": {
    "args": [
      "integer",
      "string",
      "integer",
      "decimal",
      "decimal",
      "integer",
      "integer",
      "integer",
      "integer",
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "PAT: CMRA (command) part_id (integer) overlay_sprite (string) baseimage (integer) relx (decimal) rely (decimal) relplane (integer) viewWidth (integer) viewHeight (integer) cameraWidth (integer) cameraHeight (integer) Create a camera with possible overlay sprite whose name may be blank. Use SCAM to change the camera's view.",
    "validation": {
      "arity": 10,
      "types": [
        "integer",
        "string",
        "integer",
        "decimal",
        "decimal",
        "integer",
        "integer",
        "integer",
        "integer",
        "integer"
      ]
    }
  },
  "PAT: DULL": {
    "args": [
      "integer",
      "string",
      "integer",
      "decimal",
      "decimal",
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "PAT: DULL (command) part_id (integer) sprite_file (string) first_image (integer) rel_x (decimal) rel_y (decimal) rel_plane (integer) Create a dull part for a compound agent. A dull part does nothing except show an image from the given sprite file. You should number part ids starting at 1, as part 0 is automatically made when the agent is made. The dull part's position is relative to part 0, as is its plane. Use PART to select it before you change POSE or ANIM, or use various other commands.",
    "validation": {
      "arity": 6,
      "types": [
        "integer",
        "string",
        "integer",
        "decimal",
        "decimal",
        "integer"
      ]
    }
  },
  "PAT: FIXD": {
    "args": [
      "integer",
      "string",
      "integer",
      "decimal",
      "decimal",
      "integer",
      "string"
    ],
    "kinds": [
      "command"
    ],
    "description": "PAT: FIXD (command) part_id (integer) sprite_file (string) first_image (integer) rel_x (decimal) rel_y (decimal) rel_plane (integer) font_sprite (string) Create a fixed text part. The text is wrapped on top of the supplied gallery image. new-line characters may be used. Use PTXT to set the text.",
    "validation": {
      "arity": 7,
      "types": [
        "integer",
        "string",
        "integer",
        "decimal",
        "decimal",
        "integer",
        "string"
      ]
    }
  },
  "PAT: GRPH": {
    "args": [
      "integer",
      "string",
      "integer",
      "decimal",
      "decimal",
      "integer",
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "PAT: GRPH (command) part_id (integer) overlay_sprite (string) baseimage (integer) relx (decimal) rely (decimal) relplane (integer) numValues (integer) Creates a graph part on a compound agent. Use GRPL to add a line to the graph and GRPV to add a value to a graph line.",
    "validation": {
      "arity": 7,
      "types": [
        "integer",
        "string",
        "integer",
        "decimal",
        "decimal",
        "integer",
        "integer"
      ]
    }
  },
  "PAT: KILL": {
    "args": [
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "PAT: KILL (command) part_id (integer) Destroys the specified part of a compound agent. You can't destroy part 0.",
    "validation": {
      "arity": 1,
      "types": [
        "integer"
      ]
    }
  },
  "PAT: MOVE": {
    "args": [
      "integer",
      "decimal",
      "decimal"
    ],
    "kinds": [
      "command"
    ],
    "description": "PAT: MOVE (command) part_id (integer) rel_x (decimal) rely (decimal) Moves a compound part to the new relative position specified.",
    "validation": {
      "arity": 3,
      "types": [
        "integer",
        "decimal",
        "decimal"
      ]
    }
  },
  "PAT: TEXT": {
    "args": [
      "integer",
      "string",
      "integer",
      "decimal",
      "decimal",
      "integer",
      "integer",
      "string"
    ],
    "kinds": [
      "command"
    ],
    "description": "PAT: TEXT (command) part_id (integer) sprite_file (string) first_image (integer) rel_x (decimal) rel_y (decimal) rel_plane (integer) message_id (integer) font_sprite (string) Creates a text entry part. Gains the focus when you click on it, or with the FCUS command. Sends the message_id when return is pressed - a good place to use PTXT to get the text out, and to set the focus elsewhere. Set message_id to 0 to not call any script, or to -1 to not send any message and instead insert a carriage return.",
    "validation": {
      "arity": 8,
      "types": [
        "integer",
        "string",
        "integer",
        "decimal",
        "decimal",
        "integer",
        "integer",
        "string"
      ]
    }
  },
  "PAUS": {
    "args": [
      "integer"
    ],
    "returns": "integer",
    "kinds": [
      "command",
      "reporter"
    ],
    "description": "PAUS (integer) Returns 1 if the target agent is paused, or 0 otherwise.",
    "sources": [
      "cdn://caos.html#PAUS"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "integer"
      ]
    }
  },
  "PAWS": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "PAWS (integer) Returns 1 for debug pawsed, 0 for playing. See DBG: PAWS.",
    "sources": [
      "cdn://caos.html#PAWS"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "PCLS": {
    "returns": "agent",
    "kinds": [
      "reporter"
    ],
    "description": "PCLS (agent) next (agent) family (integer) genus (integer) species (integer) Same as NCLS, only cycles the other way.",
    "sources": [
      "cdn://caos.html#PCLS"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "PERM": {
    "args": [
      "integer"
    ],
    "returns": "integer",
    "kinds": [
      "command",
      "reporter"
    ],
    "description": "PERM (integer) Returns the target's map permiability.",
    "sources": [
      "cdn://caos.html#PERM"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "integer"
      ]
    }
  },
  "PLMD": {
    "args": [
      "integer",
      "string"
    ],
    "kinds": [
      "command"
    ],
    "description": "PLMD (command) tract_index, (integer) filename (string) Dumps out all the dendrite learned information of the specified tract to a file (will be changed to sync with Palm).",
    "sources": [
      "cdn://caos.html#PLMD"
    ],
    "validation": {
      "arity": 2,
      "types": [
        "integer",
        "string"
      ]
    }
  },
  "PLMU": {
    "args": [
      "integer",
      "string"
    ],
    "kinds": [
      "command"
    ],
    "description": "PLMU (command) tract_index, (integer) filename (string) Configures the dendrites in the specified tract with the data in the file (will be changed to sync with Palm).",
    "sources": [
      "cdn://caos.html#PLMU"
    ],
    "validation": {
      "arity": 2,
      "types": [
        "integer",
        "string"
      ]
    }
  },
  "PLNE": {
    "args": [
      "integer"
    ],
    "returns": "integer",
    "kinds": [
      "command",
      "reporter"
    ],
    "description": "PLNE (integer) Returns the screen depth plane of the principal part.",
    "sources": [
      "cdn://caos.html#PLNE"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "integer"
      ]
    }
  },
  "PNTR": {
    "returns": "agent",
    "kinds": [
      "reporter"
    ],
    "description": "PNTR (agent) Returns the mouse pointer, which is also known as the hand.",
    "sources": [
      "cdn://caos.html#PNTR"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "PNXT": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "PNXT (integer) previous_part (integer) Returns the next compound PART on an agent. Start by calling it with -1 to get the first part, and it finishes by returning -1 when it reaches the end.",
    "sources": [
      "cdn://caos.html#PNXT"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "POSB": {
    "returns": "float",
    "kinds": [
      "reporter"
    ],
    "description": "POSB (float) Returns bottom position of target's bounding box.",
    "sources": [
      "cdn://caos.html#POSB"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "POSE": {
    "args": [
      "frame (int)"
    ],
    "returns": "int",
    "description": "Set target\u2019s current animation frame, or report it",
    "notes": "Command form (POSE n) sets sprite to frame n; reporter form returns current frame index",
    "kinds": [
      "command",
      "reporter"
    ],
    "sources": [
      "cdn://caos.html#POSE"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "frame (int)"
      ]
    }
  },
  "POSL": {
    "returns": "float",
    "kinds": [
      "reporter"
    ],
    "description": "POSL (float) Returns left position of target's bounding box.",
    "sources": [
      "cdn://caos.html#POSL"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "POSR": {
    "returns": "float",
    "kinds": [
      "reporter"
    ],
    "description": "POSR (float) Returns right position of target's bounding box.",
    "sources": [
      "cdn://caos.html#POSR"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "POST": {
    "returns": "float",
    "kinds": [
      "reporter"
    ],
    "description": "POST (float) Returns top position of target's bounding box.",
    "sources": [
      "cdn://caos.html#POST"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "POSX": {
    "returns": "float",
    "kinds": [
      "reporter"
    ],
    "description": "POSX (float) Returns X position of centre of target.",
    "sources": [
      "cdn://caos.html#POSX"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "POSY": {
    "returns": "float",
    "kinds": [
      "reporter"
    ],
    "description": "POSY (float) Returns Y position of centre of target.",
    "sources": [
      "cdn://caos.html#POSY"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "PRAY AGTI": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "PRAY AGTI (integer) resource_name (string) integer_tag (string) default_value (integer) This returns the value of the integer tag associated with the named resource. If the resource does not contain such a tag, then the default value specified is returned. This call pairs with PRAY AGTS.",
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "PRAY AGTS": {
    "returns": "string",
    "kinds": [
      "reporter"
    ],
    "description": "PRAY AGTS (string) resource_name (string) string_tag (string) default_value (string) This returns the value of the string tag associated with the named resource. If the resource does not contain such a tag, then the default value specified is returned. This call pairs with PRAY AGTI.",
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "PRAY BACK": {
    "returns": "string",
    "kinds": [
      "reporter"
    ],
    "description": "PRAY BACK (string) resource_type (string) last_known (string) Like PRAY PREV, only doesn't loop at the end. If you go beyond the first entry then it returns an empty string.",
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "PRAY COUN": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "PRAY COUN (integer) resource_type (string) This returns the number of resource chunks which are tagged with the resource type passed in. Resource types are four characters only. Anything over that length will be silently truncated.",
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "PRAY DEPS": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "PRAY DEPS (integer) resource_name (string) do_install (integer) This performs a scan of the specified resource, and checks out the dependency data. The primary use for this would be in the preparation for injection of agents. If you pass zero in the do_install parameter, then the dependencies are only checked. If do_install is non-zero, then they are installed also. The return values are as follows:0 = Success-1 = Agent Type not found-2 = Dependency Count not found-3 to -(2 + count) is the dependency string missing-(3+count) to -(2+2*count) is the dependency type missing2*count to 3*count is t",
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "PRAY EXPO": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "PRAY EXPO (integer) chunk_type (string) This function exports the target creature. If the creature is exported successfully then it has been removed from the world. Returns value is one of the following:0 for success1 if the creature, or if pregnant any of its offspring, are already on disk in some form.The chunk type should be used to find the creature again to import it. In Creatures 3, most exported creatures have a chunk type EXPC, and the starter family uses SFAM.For new games, you should not use SFAM, as its data would get confused with that of an EXPC with the same moniker. This is for ",
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "PRAY FILE": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "PRAY FILE (integer) resource_name (string) resource_type (integer) do_install (integer) This performs the \"installation\" of one file from the resource files. The resource_type is defined in the agent resource guide. If do_install is zero, the command simply checks if the file install should succeed. Return value is 0 for success, 1 for error.",
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "PRAY FORE": {
    "returns": "string",
    "kinds": [
      "reporter"
    ],
    "description": "PRAY FORE (string) resource_type (string) last_known (string) Like PRAY NEXT, only doesn't loop at the end. If you go beyond the last entry then it returns an empty string.",
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "PRAY GARB": {
    "args": [
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "PRAY GARB (command) force (integer) This command clears the manager's cached resource data. Execute this after a lot of resource accesses (E.g. installing an agent) to clean up the memory used during the process. If you don't do this, excess memory can be held for a while, If the parameter is zero (the most usual) then the manager will only forget resources which are not in use at the moment. If force is non-zero, then the manager will forget all the previously loaded resources. As the resources currently in use go out of scope, they are automatically garbage collected.",
    "validation": {
      "arity": 1,
      "types": [
        "integer"
      ]
    }
  },
  "PRAY IMPO": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "PRAY IMPO (integer) moniker_chunk (string) actually_do_it (integer) keep_file (integer) This function imports the creature with the requested moniker and chunk type. Returns one of the following codes:0 - success1 - couldn't reconcile histories so creature was cloned2 - moniker not found in PRAY system3 - unused error code4 - internal / file format errorSet actually_do_it to 1 to try and perform the import, or 0 to perform a query giving just the return value. You can use the query to test if the creature is available, and if the creature would have to be cloned upon importing, and warn the us",
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "PRAY INJT": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "PRAY INJT (integer) resource_name (string) do_install (integer) report_var (variable) This command injects an agent. The agent must be in the chunk named. If do_install is zero, the command simply checks for the presence of the required scripts and dependencies. If non-zero, it attempts to inject the agent. The report var is a string variable, and is set to the name of the offending script if the injection/check fails. Return is 0 for success, -1 for \"Script not found\" and if injecting, -2 for \"Injection failed\". Return value -3 indicates that a dependency evaluation failed, and in this case, ",
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "PRAY KILL": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "PRAY KILL (integer) resource_name (string) Deletes the resource file which contains the specified chunk. This is permanent and irreversible. Returns 1 if there was such a chunk and file, or 0 if there wasn't.",
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "PRAY MAKE": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "PRAY MAKE (integer) which_journal_spot (integer) journal_name (string) which_pray_spot (integer) pray_name (string) report_destination (variable) Please see the documentation accompanying the praybuilder on CDNSuffice it to say: return value is zero for success, otherwise non-zero, and report is set to the praybuilder output for youAlso, the which_journal_spot is zero for world journal, 1 for global journal. Also the which_pray_spot is zero for \"My Agents\" and 1 for \"My Creatures\"",
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "PRAY NEXT": {
    "returns": "string",
    "kinds": [
      "reporter"
    ],
    "description": "PRAY NEXT (string) resource_type (string) last_known (string) This returns the name of the resource chunk directly after the named one, given that they are of the same type. It loops when it reaches the end. If the named resource cannot be found in the list of resources of the type specified, then the last resource of that type is returned. This call pairs with PRAY PREV. Compare PRAY FORE.",
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "PRAY PREV": {
    "returns": "string",
    "kinds": [
      "reporter"
    ],
    "description": "PRAY PREV (string) resource_type (string) last_known (string) This returns the name of the resource chunk directly before the named one, given that they are of the same type. It loops when it reaches the end. If the named resource cannot be found in the list of resources of the type specified, then the first resource of that type is returned. This call pairs with PRAY NEXT. Compare PRAY BACK.",
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "PRAY REFR": {
    "kinds": [
      "command"
    ],
    "description": "PRAY REFR (command) This command refreshes the engine's view of the Resource directory. Execute this if you have reason to believe that the files in the directory may have changed. It only detects changes if there is a new file or a deleted file - if a file has only changed it won't notice. This is awkward during development, you can use PRAY KILL to kill the old file before copying the new one over. PRAY REFR forces a PRAY GARB to happen automatically.",
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "PRAY TEST": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "PRAY TEST (integer) resource_name (string) This checks for the existence of a chunk, returning zero if it is not found, and a value from 1-3 indicating the cost to load if it is.Return values are currently defined as:0 - Chunk not available at this time1 - Chunk Available, Cached and ready for use2 - Chunk available, on disk uncompressed and fine for loading3 - Chunk available, on disk compressed and ready for loading. Thus the return value could be thought of as the cost of loading, where 1 is no cost, and 3 is high cost.",
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "PROP": {
    "args": [
      "integer",
      "integer",
      "float"
    ],
    "returns": "float",
    "kinds": [
      "command",
      "reporter"
    ],
    "description": "PROP (float) room_id (integer) ca_index (integer) Returns the value of a CA in a room.",
    "sources": [
      "cdn://caos.html#PROP"
    ],
    "validation": {
      "arity": 3,
      "types": [
        "integer",
        "integer",
        "float"
      ]
    }
  },
  "PRT: BANG": {
    "args": [
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "PRT: BANG (command) bang_strength (integer) Breaks connections randomly with other machines (as if the machine had been 'banged'. Use a bang_strength of 100 to disconnect all ports, 50 to disconnect about half etc.",
    "validation": {
      "arity": 1,
      "types": [
        "integer"
      ]
    }
  },
  "PRT: FRMA": {
    "returns": "agent",
    "kinds": [
      "reporter"
    ],
    "description": "PRT: FRMA (agent) inputport (integer) Returns the agent from which the input port is fed. Returns NULLHANDLE if that port does not exist, or is not connected.",
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "PRT: FROM": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "PRT: FROM (integer) inputport (integer) Returns the output port index on the source agent, feeding that input port on the TARG agent.Return values are -ve for error.",
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "PRT: INEW": {
    "args": [
      "integer",
      "string",
      "string",
      "integer",
      "integer",
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "PRT: INEW (command) id (integer) name (string) description (string) x (integer) y (integer) message_num (integer) Create a new input port on target. You should number input port ids starting at 0. The message_num is the message that will be sent to the agent when a signal comes in through the input port. _P1_ of that message will contain the data value of the signal. The position of the port, relative to the agent, is given by x, y.",
    "validation": {
      "arity": 6,
      "types": [
        "integer",
        "string",
        "string",
        "integer",
        "integer",
        "integer"
      ]
    }
  },
  "PRT: ITOT": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "PRT: ITOT (integer) Returns the number of input ports, assuming they are indexed sequentially.",
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "PRT: IZAP": {
    "args": [
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "PRT: IZAP (command) id (integer) Remove the specified input port.",
    "validation": {
      "arity": 1,
      "types": [
        "integer"
      ]
    }
  },
  "PRT: JOIN": {
    "args": [
      "agent",
      "integer",
      "agent",
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "PRT: JOIN (command) source_agent (agent) output_id (integer) dest_agent (agent) input_id (integer) Connect an output port on the source agent to an input port on the destination. An input may only be connected to one output at at time, but an output may feed any number of inputs.",
    "validation": {
      "arity": 4,
      "types": [
        "agent",
        "integer",
        "agent",
        "integer"
      ]
    }
  },
  "PRT: KRAK": {
    "args": [
      "agent",
      "integer",
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "PRT: KRAK (command) agent (agent) in_or_out (integer) port_index (integer) Breaks a specific connection on a machine. If in_or_out is zero, it is an input port whose connection is broken, if it is an output port, then all inputs are disconnected.",
    "validation": {
      "arity": 3,
      "types": [
        "agent",
        "integer",
        "integer"
      ]
    }
  },
  "PRT: NAME": {
    "returns": "string",
    "kinds": [
      "reporter"
    ],
    "description": "PRT: NAME (string) agent (agent) in_or_out (integer) port_index (integer) Returns the name of the indexed port (input port if in_or_out is zero, output port if non-zero) on the specified agent. Returns \"\" in error.",
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "PRT: ONEW": {
    "args": [
      "integer",
      "string",
      "string",
      "integer",
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "PRT: ONEW (command) id (integer) name (string) description (string) x (integer) y (integer) Create a new output port on target. You should number input port ids starting at 0. The port's relative position is given by x, y.",
    "validation": {
      "arity": 5,
      "types": [
        "integer",
        "string",
        "string",
        "integer",
        "integer"
      ]
    }
  },
  "PRT: OTOT": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "PRT: OTOT (integer) Returns the number of output ports, assuming they are indexed sequentially.",
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "PRT: OZAP": {
    "args": [
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "PRT: OZAP (command) id (integer) Remove the specified output port.",
    "validation": {
      "arity": 1,
      "types": [
        "integer"
      ]
    }
  },
  "PRT: SEND": {
    "args": [
      "integer",
      "anything"
    ],
    "kinds": [
      "command"
    ],
    "description": "PRT: SEND (command) id (integer) data (anything) Send a signal from the specified output port to all connected inputs. The data can be any integer.",
    "validation": {
      "arity": 2,
      "types": [
        "integer",
        "anything"
      ]
    }
  },
  "PSWD": {
    "args": [
      "string"
    ],
    "returns": "string",
    "kinds": [
      "command",
      "reporter"
    ],
    "description": "PSWD (command) password (string) Sets the password for the next world loaded. The world must be loaded (and saved) before it is actually set.",
    "sources": [
      "cdn://caos.html#PSWD"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "string"
      ]
    }
  },
  "PTXT": {
    "args": [
      "string"
    ],
    "returns": "string",
    "kinds": [
      "command",
      "reporter"
    ],
    "description": "PTXT (string) Returns the string of the current text part. See the PTXT command for more information.",
    "sources": [
      "cdn://caos.html#PTXT"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "string"
      ]
    }
  },
  "PUHL": {
    "args": [
      "integer",
      "integer",
      "integer"
    ],
    "returns": "integer",
    "kinds": [
      "command",
      "reporter"
    ],
    "description": "PUHL (integer) pose (integer) x_or_y (integer) Returns the x or y coordinate of the handle that target is picked up by for the given pose. x_or_y is 1 for x, 2 for y. The pose is measured from the absolute base specified in the NEW: command, rather than the relative base specified by the BASE command.",
    "sources": [
      "cdn://caos.html#PUHL"
    ],
    "validation": {
      "arity": 3,
      "types": [
        "integer",
        "integer",
        "integer"
      ]
    }
  },
  "PUPT": {
    "args": [
      "integer",
      "integer",
      "integer"
    ],
    "returns": "integer",
    "kinds": [
      "command",
      "reporter"
    ],
    "description": "PUPT (integer) pose (integer) x_or_y (integer) Returns the x or y coordinate of the place where target picks agents up for the given pose. x_or_y is 1 for x, 2 for y. The pose is measured from the absolute base specified in the NEW: command, rather than the relative base specified by the BASE command.",
    "sources": [
      "cdn://caos.html#PUPT"
    ],
    "validation": {
      "arity": 3,
      "types": [
        "integer",
        "integer",
        "integer"
      ]
    }
  },
  "PURE": {
    "args": [
      "integer"
    ],
    "returns": "integer",
    "kinds": [
      "command",
      "reporter"
    ],
    "description": "PURE (integer) Returns whether default pointer behaviour is disabled or enabled. 1 if enabled, 0 if disabled.",
    "sources": [
      "cdn://caos.html#PURE"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "integer"
      ]
    }
  },
  "QUIT": {
    "kinds": [
      "command"
    ],
    "description": "QUIT (command) Quits the engine at the start of the next tick, without saving any changes. Call SAVE first to make it save the current world. If doing a sequence like \"SAVE QUIT\" or \"SAVE LOAD menu\", do it in an INST section. Otherwise it will sometimes save between the two instructions, meaning it quits (or loads menu) immediately upon reloading.",
    "sources": [
      "cdn://caos.html#QUIT"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "RACE": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "RACE (integer) Returns the time in milliseconds which the last tick took overall. This differs from PACE in that on fast machines it will have a minimum of 50 milliseconds, or the value set by BUZZ. It accounts for all the time in the tick, including event handling and window processing.",
    "sources": [
      "cdn://caos.html#RACE"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "RAND": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "RAND (integer) value1 (integer) value2 (integer) Returns a random integer between value1 and value2 inclusive of both values. You can use negative values, and have them either way round.",
    "sources": [
      "cdn://caos.html#RAND"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "RATE": {
    "args": [
      "integer",
      "integer",
      "float",
      "float",
      "float"
    ],
    "returns": "string",
    "kinds": [
      "command",
      "reporter"
    ],
    "description": "RATE (string) room_type (integer) ca_index (integer) Returns a string containing gain, loss and diffusion rates for that combination of room type and CA.",
    "sources": [
      "cdn://caos.html#RATE"
    ],
    "validation": {
      "arity": 5,
      "types": [
        "integer",
        "integer",
        "float",
        "float",
        "float"
      ]
    }
  },
  "RCLR": {
    "args": [
      "integer",
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "RCLR (command) x (integer) y (integer) Clear the music for the room at the given location.",
    "sources": [
      "cdn://caos.html#RCLR"
    ],
    "validation": {
      "arity": 2,
      "types": [
        "integer",
        "integer"
      ]
    }
  },
  "READ": {
    "returns": "string",
    "kinds": [
      "reporter"
    ],
    "description": "READ (string) catalogue_tag (string) offset (integer) Returns a string from the catalogue. This is used for localisation. offset 0 is the first string after the TAG command in the catalogue file. See also REAN and WILD.",
    "sources": [
      "cdn://caos.html#READ"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "REAF": {
    "kinds": [
      "command"
    ],
    "description": "REAF (command) Refreshes the catalogue from files on disk, from the main catalogue directory and the world catalogue directory. These are normally read in at startup, when a new world is read in, or when the PRAY resources system installs a catalogue file. Use while developing CAOS programs to refresh the catalogue as you add entries.",
    "sources": [
      "cdn://caos.html#REAF"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "REAN": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "REAN (integer) catalogue_tag (string) Returns the number of entries in the catalogue for the given tag. For the same tag, you can READ values from 0 to one less than REAN returns.",
    "sources": [
      "cdn://caos.html#REAN"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "REAQ": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "REAQ (integer) catalogue_tag (string) Returns 1 if the catalogue tag is present, 0 if not.",
    "sources": [
      "cdn://caos.html#REAQ"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "RELX": {
    "returns": "float",
    "kinds": [
      "reporter"
    ],
    "description": "RELX (float) first (agent) second (agent) Returns the relative X distance of the centre point of the second agent from the centre point of the first.",
    "sources": [
      "cdn://caos.html#RELX"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "RELY": {
    "returns": "float",
    "kinds": [
      "reporter"
    ],
    "description": "RELY (float) first (agent) second (agent) Returns the relative Y distance of the centre point of the second agent from the centre point of the first.",
    "sources": [
      "cdn://caos.html#RELY"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "REPE": {
    "kinds": [
      "command"
    ],
    "description": "REPE (command) Closes a REPS loop.",
    "sources": [
      "cdn://caos.html#REPE"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "REPS": {
    "args": [
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "REPS (command) count (integer) Loop through a block of code a number of times. Must have a matching REPE command to close the block.",
    "sources": [
      "cdn://caos.html#REPS"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "integer"
      ]
    }
  },
  "RETN": {
    "kinds": [
      "command"
    ],
    "description": "RETN (command) Return from subroutine. Do not use this instruction from inside a block of code (eg a LOOP#..EVER or ENUM...NEXT etc...)! See SUBR and GSUB.",
    "sources": [
      "cdn://caos.html#RETN"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "RGAM": {
    "kinds": [
      "command"
    ],
    "description": "RGAM (command) Refresh all settings that are always read from game variables at start up e.g. the length of a day. This allows you to change such setting on the fly.",
    "sources": [
      "cdn://caos.html#RGAM"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "RGHT": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "RGHT (integer) Returns the value of the right constant.",
    "sources": [
      "cdn://caos.html#RGHT"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "RLOC": {
    "returns": "string",
    "kinds": [
      "reporter"
    ],
    "description": "RLOC (string) room_id (integer) Returns the location of the specified room as a string formated as follows: xLeft xRight yLeftCeiling yRightCeiling yLeftFloor yRightFloor.",
    "sources": [
      "cdn://caos.html#RLOC"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "RMSC": {
    "args": [
      "integer",
      "integer",
      "string"
    ],
    "returns": "string",
    "kinds": [
      "command",
      "reporter"
    ],
    "description": "RMSC (string) x (integer) y (integer) Returns the name of the music track played at the room in the given location.",
    "sources": [
      "cdn://caos.html#RMSC"
    ],
    "validation": {
      "arity": 3,
      "types": [
        "integer",
        "integer",
        "string"
      ]
    }
  },
  "RNGE": {
    "args": [
      "float"
    ],
    "returns": "float",
    "kinds": [
      "command",
      "reporter"
    ],
    "description": "RNGE (float) Returns the target's range. See ESEE, OBST.",
    "sources": [
      "cdn://caos.html#RNGE"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "float"
      ]
    }
  },
  "ROOM": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "ROOM (integer) agent (agent) Returns the id of the room containing the midpoint of the specified agent.",
    "sources": [
      "cdn://caos.html#ROOM"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "ROTN": {
    "args": [
      "float",
      "float"
    ],
    "kinds": [
      "command"
    ],
    "description": "ROTN (command) no_of_sprites_for_each_rotation (float) no_of_rotations (float) For automatic change of sprite when the agent rotates the engine assumes that the sprite file is stored with all the sprites for one rotation together starting with pointing north.",
    "sources": [
      "cdn://caos.html#ROTN"
    ],
    "validation": {
      "arity": 2,
      "types": [
        "float",
        "float"
      ]
    }
  },
  "RPAS": {
    "args": [
      "agent",
      "agent"
    ],
    "kinds": [
      "command"
    ],
    "description": "RPAS (command) vehicle (agent) passenger (agent) Specified vehicle drops the specified passenger.",
    "sources": [
      "cdn://caos.html#RPAS"
    ],
    "validation": {
      "arity": 2,
      "types": [
        "agent",
        "agent"
      ]
    }
  },
  "RTAR": {
    "args": [
      "integer",
      "integer",
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "RTAR (command) family (integer) genus (integer) species (integer) Randomly chooses an agent which matches the given classifier, and targets it.",
    "sources": [
      "cdn://caos.html#RTAR"
    ],
    "validation": {
      "arity": 3,
      "types": [
        "integer",
        "integer",
        "integer"
      ]
    }
  },
  "RTIF": {
    "returns": "string",
    "kinds": [
      "reporter"
    ],
    "description": "RTIF (string) real_time (integer) format (string) Takes a real world time, as returned by RTIM or HIST RTIM and converts it to a localised string for display. The format string is made up of any text, with the following special codes:%a - Abbreviated weekday name%A - Full weekday name%b - Abbreviated month name%B - Full month name%c - Date and time representation appropriate for locale%d - Day of month as decimal number (01 - 31)%H - Hour in 24-hour format (00 - 23)%I - Hour in 12-hour format (01 - 12)%j - Day of year as decimal number (001 - 366)%m - Month as decimal number (01 - 12)%M - Minu",
    "sources": [
      "cdn://caos.html#RTIF"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "RTIM": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "RTIM (integer) Returns the current real world time. This is measured in seconds since midnight, 1 January 1970 in UTC. To display, use RTIF.",
    "sources": [
      "cdn://caos.html#RTIM"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "RTYP": {
    "args": [
      "integer",
      "integer"
    ],
    "returns": "integer",
    "kinds": [
      "command",
      "reporter"
    ],
    "description": "RTYP (integer) room_id (integer) Returns the type of a room, or -1 if not a valid room id.",
    "sources": [
      "cdn://caos.html#RTYP"
    ],
    "validation": {
      "arity": 2,
      "types": [
        "integer",
        "integer"
      ]
    }
  },
  "SAVE": {
    "kinds": [
      "command"
    ],
    "description": "SAVE (command) Saves the current world at the start of the next tick. See also QUIT for important information about using INST.",
    "sources": [
      "cdn://caos.html#SAVE"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "SAYN": {
    "kinds": [
      "command"
    ],
    "description": "SAYN (command) Creature expresses need, by speaking.",
    "sources": [
      "cdn://caos.html#SAYN"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "SCAM": {
    "args": [
      "agent",
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "SCAM (command) compoundagent (agent) partNumber (integer) Sets the current camera to be used in subsequent camera macro commands. This uses the given TARG and the given PART number. If you set this to NULL then the Main Camera will be used. This is the default setting",
    "sources": [
      "cdn://caos.html#SCAM"
    ],
    "validation": {
      "arity": 2,
      "types": [
        "agent",
        "integer"
      ]
    }
  },
  "SCOL": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "SCOL (integer) and_mask (integer) eor_mask (integer) up_speeds (byte-string) down_speeds (byte-string) Set an AND and an EOR mask, to control the following scrolling functions:1 - Screen edge nudgy scrolling2 - Keyboard scrolling4 - Middle mouse button screen dragging8 - Mouse wheel screen scrollingThe byte strings is used for nudgy and keyboard scrolling. The defaults are [1 2 4 8 16 32 64] and [0 1 2 4 8 16 32]. They represent the number of pixels scrolled each consecutive tick, as the scrolling gets slower and faster.If you use [] for a byte string, then the string won't be changed at all. ",
    "sources": [
      "cdn://caos.html#SCOL"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "SCRX": {
    "args": [
      "integer",
      "integer",
      "integer",
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "SCRX (command) family (integer) genus (integer) species (integer) event (integer) Remove specified script from the scriptorium.",
    "sources": [
      "cdn://caos.html#SCRX"
    ],
    "validation": {
      "arity": 4,
      "types": [
        "integer",
        "integer",
        "integer",
        "integer"
      ]
    }
  },
  "SDMP": {
    "args": [
      "float"
    ],
    "returns": "float",
    "kinds": [
      "command",
      "reporter"
    ],
    "description": "SDMP (float) Get current sideways damping. The value is from 0.0 to 1.0 where 0.0 means no damping, 1.0 maximum.",
    "sources": [
      "cdn://caos.html#SDMP"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "float"
      ]
    }
  },
  "SEAN": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "SEAN (integer) Returns the current season. This can be0 - spring1 - summer2 - autumn3 - winterThe GAME variable engine_LengthOfSeasonInDays sets the season length. See also HIST SEAN.",
    "sources": [
      "cdn://caos.html#SEAN"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "SEEE": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "SEEE (integer) first (agent) second (agent) Returns 1 if the first agent can see the second, or 0 if it can't. See ESEE.",
    "sources": [
      "cdn://caos.html#SEEE"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "SEEN": {
    "returns": "agent",
    "kinds": [
      "reporter"
    ],
    "description": "SEEN (agent) category (integer) Returns the agent which the creature TARG has currently in mind for the category specified.",
    "sources": [
      "cdn://caos.html#SEEN"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "SETA": {
    "args": [
      "variable",
      "agent"
    ],
    "kinds": [
      "command"
    ],
    "description": "SETA (command) var (variable) value (agent) Stores a reference to an agent in a variable.",
    "sources": [
      "cdn://caos.html#SETA"
    ],
    "validation": {
      "arity": 2,
      "types": [
        "variable",
        "agent"
      ]
    }
  },
  "SETS": {
    "args": [
      "variable",
      "string"
    ],
    "kinds": [
      "command"
    ],
    "description": "SETS (command) var (variable) value (string) Sets a variable to a string value.",
    "sources": [
      "cdn://caos.html#SETS"
    ],
    "validation": {
      "arity": 2,
      "types": [
        "variable",
        "string"
      ]
    }
  },
  "SETV": {
    "args": [
      "variable",
      "decimal"
    ],
    "kinds": [
      "command"
    ],
    "description": "SETV (command) var (variable) value (decimal) Stores an integer or float in a variable.",
    "sources": [
      "cdn://caos.html#SETV"
    ],
    "validation": {
      "arity": 2,
      "types": [
        "variable",
        "decimal"
      ]
    }
  },
  "SEZZ": {
    "args": [
      "string"
    ],
    "kinds": [
      "command"
    ],
    "description": "SEZZ (command) text (string) Makes the TARG agent speak the specified text with voice as set by VOIS or VOIC. If TARG is a creature then it will be spoken properly (speech bubble et al).",
    "sources": [
      "cdn://caos.html#SEZZ"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "string"
      ]
    }
  },
  "SHOW": {
    "args": [
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "SHOW (command) visibility (integer) Set the parameter to 0 to hide the agent and to 1 to show the agent on camera. This removes or adds the agent to the main camera and any remote cameras. A non-shown agent can still be visible to creatures, and can still be clicked on or picked up. It just doesn't appear on the cameras.",
    "sources": [
      "cdn://caos.html#SHOW"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "integer"
      ]
    }
  },
  "SINS": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "SINS (integer) main (string) index_to_search_from (integer) search (string) Looks for the search string as an exact substring of the main string (string in string). Starts searching at the given index into the main string - to find the first occurence, set this to 1. String indices begin at 1. Returns the index of the position of the substring, if found, or -1 otherwise. The search is case sensitive - use UPPA and LOWA to convert all strings first, for a case insensitive search.",
    "sources": [
      "cdn://caos.html#SINS"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "SIN_": {
    "returns": "float",
    "kinds": [
      "reporter"
    ],
    "description": "SIN_ (float) theta (float) Returns sine of theta. Theta should be in degrees.",
    "sources": [
      "cdn://caos.html#SIN_"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "SLOW": {
    "args": [],
    "returns": null,
    "description": "Exit instant mode, returning to normal execution speed",
    "notes": "Ends the atomic section started by INST, allowing interruptions",
    "kinds": [
      "command"
    ],
    "sources": [
      "cdn://caos.html#SLOW"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "SNAP": {
    "args": [
      "string",
      "integer",
      "integer",
      "integer",
      "integer",
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "SNAP (command) filename (string) x_centre (integer) y_centre (integer) width (integer) height (integer) zoom_factor (integer) This takes a photograph of the world at a particular place. The zoom parameter should be between 0 and 100. 100 means at original size, 50 means half size etc. It makes a new image file in the world images directory - you can use it to make agents and parts as with any image file. Call SNAX first to check your filename isn't already in use in any images directory. When you have finished with the file, call LOFT.",
    "sources": [
      "cdn://caos.html#SNAP"
    ],
    "validation": {
      "arity": 6,
      "types": [
        "string",
        "integer",
        "integer",
        "integer",
        "integer",
        "integer"
      ]
    }
  },
  "SNAX": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "SNAX (integer) filename (string) Returns 1 if the specified image file exists, or 0 if it doesn't. Use with SNAP to find a unique filename to use.",
    "sources": [
      "cdn://caos.html#SNAX"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "SNDC": {
    "args": [
      "string"
    ],
    "kinds": [
      "command"
    ],
    "description": "SNDC (command) sound_file (string) Plays a controlled sound effect emitted from the target. Updates volume and panning as the agent moves.",
    "sources": [
      "cdn://caos.html#SNDC"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "string"
      ]
    }
  },
  "SNDE": {
    "args": [
      "string"
    ],
    "kinds": [
      "command"
    ],
    "description": "SNDE (command) sound_file (string) Play a sound effect audible as if emitted from target's current location.",
    "sources": [
      "cdn://caos.html#SNDE"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "string"
      ]
    }
  },
  "SNDL": {
    "args": [
      "string"
    ],
    "kinds": [
      "command"
    ],
    "description": "SNDL (command) sound_file (string) Play a sound effect as in SNDC, only the sound is looped.",
    "sources": [
      "cdn://caos.html#SNDL"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "string"
      ]
    }
  },
  "SNDQ": {
    "args": [
      "string",
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "SNDQ (command) sound_file (string) delay (integer) As SNDE, only with a delay before playing.",
    "sources": [
      "cdn://caos.html#SNDQ"
    ],
    "validation": {
      "arity": 2,
      "types": [
        "string",
        "integer"
      ]
    }
  },
  "SORC": {
    "returns": "string",
    "kinds": [
      "reporter"
    ],
    "description": "SORC (string) family (integer) genus (integer) species (integer) event (integer) Returns the source code for the specified script. Use the GIDS commands to find available scripts.",
    "sources": [
      "cdn://caos.html#SORC"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "SORQ": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "SORQ (integer) family (integer) genus (integer) species (integer) event (integer) Returns 1 if the script is in the scriptorium, or if there is a general event script for the entire genus, or family. Returns 0 if there is no matching script.",
    "sources": [
      "cdn://caos.html#SORQ"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "SOUL": {
    "args": [
      "integer",
      "integer"
    ],
    "returns": "integer",
    "kinds": [
      "command",
      "reporter"
    ],
    "description": "SOUL (integer) facultyId (integer) Returns whether the creature faculty of the type specified is being processed or not.",
    "sources": [
      "cdn://caos.html#SOUL"
    ],
    "validation": {
      "arity": 2,
      "types": [
        "integer",
        "integer"
      ]
    }
  },
  "SPAS": {
    "args": [
      "agent",
      "agent"
    ],
    "kinds": [
      "command"
    ],
    "description": "SPAS (command) vehicle (agent) new_passenger (agent) Specified vehicle picks up the specified passenger.",
    "sources": [
      "cdn://caos.html#SPAS"
    ],
    "validation": {
      "arity": 2,
      "types": [
        "agent",
        "agent"
      ]
    }
  },
  "SPCS": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "SPCS (integer) Returns species of target. See also FMLY, GNUS.",
    "sources": [
      "cdn://caos.html#SPCS"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "SPIN": {
    "args": [
      "float"
    ],
    "returns": "float",
    "kinds": [
      "command",
      "reporter"
    ],
    "description": "SPIN (float) Get current facing angle.",
    "sources": [
      "cdn://caos.html#SPIN"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "float"
      ]
    }
  },
  "SPNL": {
    "args": [
      "string",
      "integer",
      "float"
    ],
    "kinds": [
      "command"
    ],
    "description": "SPNL (command) lobe_moniker (string) neuron_id (integer) value (float) This sets the input of the neuron in the lobe specified to be the value given.",
    "sources": [
      "cdn://caos.html#SPNL"
    ],
    "validation": {
      "arity": 3,
      "types": [
        "string",
        "integer",
        "float"
      ]
    }
  },
  "SQRT": {
    "returns": "float",
    "kinds": [
      "reporter"
    ],
    "description": "SQRT (float) value (float) Calculates a square root.",
    "sources": [
      "cdn://caos.html#SQRT"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "STAR": {
    "args": [
      "integer",
      "integer",
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "STAR (command) family (integer) genus (integer) species (integer) Randomly chooses an agent which matches the given classifier and can be seen by the owner of the script. It then sets TARG to that agent. See ESEE for an explanation of seeing.",
    "sources": [
      "cdn://caos.html#STAR"
    ],
    "validation": {
      "arity": 3,
      "types": [
        "integer",
        "integer",
        "integer"
      ]
    }
  },
  "STEP": {
    "args": [
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "STEP (command) facultyId (integer) Does one update of the specified faculty (for faculty id see SOUL#).",
    "sources": [
      "cdn://caos.html#STEP"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "integer"
      ]
    }
  },
  "STIM SHOU": {
    "args": [
      "integer",
      "float"
    ],
    "kinds": [
      "command"
    ],
    "description": "STIM SHOU (command) stimulus (integer) strength (float) Shout a stimulus to all creatures who can hear OWNR. The strength is a multiplier for the stimulus. Set to 1 for a default stimulation, 2 for a stronger stimulation and so on. It is important you use this, rather than send several stims, as it affects learning. Set strength to 0 to prevent learning altogether, and send a strength 1 chemical change. See the table of Stimulus Numbers.",
    "validation": {
      "arity": 2,
      "types": [
        "integer",
        "float"
      ]
    }
  },
  "STIM SIGN": {
    "args": [
      "integer",
      "float"
    ],
    "kinds": [
      "command"
    ],
    "description": "STIM SIGN (command) stimulus (integer) strength (float) Send a stimulus to all creatures who can see OWNR.",
    "validation": {
      "arity": 2,
      "types": [
        "integer",
        "float"
      ]
    }
  },
  "STIM TACT": {
    "args": [
      "integer",
      "float"
    ],
    "kinds": [
      "command"
    ],
    "description": "STIM TACT (command) stimulus (integer) strength (float) Send a stimulus to all creatures who are touching OWNR.",
    "validation": {
      "arity": 2,
      "types": [
        "integer",
        "float"
      ]
    }
  },
  "STIM WRIT": {
    "args": [
      "agent",
      "integer",
      "float"
    ],
    "kinds": [
      "command"
    ],
    "description": "STIM WRIT (command) creature (agent) stimulus (integer) strength (float) Send stimulus to a specific creature. Can be used from an install script, but the stimulus will be from NULL, so the creature will react but not learn.",
    "validation": {
      "arity": 3,
      "types": [
        "agent",
        "integer",
        "float"
      ]
    }
  },
  "STOF": {
    "returns": "float",
    "kinds": [
      "reporter"
    ],
    "description": "STOF (float) value (string) Converts a string in decimal to a floating point number. Characters in the string after an initial number are quietly ignored. If there is no obvious number then zero is returned.",
    "sources": [
      "cdn://caos.html#STOF"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "STOI": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "STOI (integer) value (string) Converts a string in decimal to an integer. Characters in the string after an initial number are quietly ignored. If there is no obvious number then zero is returned.",
    "sources": [
      "cdn://caos.html#STOI"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "STOP": {
    "args": [],
    "returns": null,
    "description": "Stop the current script immediately",
    "notes": "Use STOP to terminate script execution cleanly (e.g. in DOIF false branch)",
    "kinds": [
      "command"
    ],
    "sources": [
      "cdn://caos.html#STOP"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "STPC": {
    "kinds": [
      "command"
    ],
    "description": "STPC (command) Stops a controlled sound.",
    "sources": [
      "cdn://caos.html#STPC"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "STPT": {
    "kinds": [
      "command"
    ],
    "description": "STPT (command) Stops any currently running script in the target agent. See also STOP.",
    "sources": [
      "cdn://caos.html#STPT"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "STRK": {
    "args": [
      "integer",
      "string"
    ],
    "kinds": [
      "command"
    ],
    "description": "STRK (command) latency (integer) track (string) This triggers the music track specified. The track will play for at least latency seconds before being overridden by room or metaroom music.",
    "sources": [
      "cdn://caos.html#STRK"
    ],
    "validation": {
      "arity": 2,
      "types": [
        "integer",
        "string"
      ]
    }
  },
  "STRL": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "STRL (integer) string (string) Returns the length of a string.",
    "sources": [
      "cdn://caos.html#STRL"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "SUBR": {
    "kinds": [
      "command"
    ],
    "description": "SUBR (command) Defines the start of a subroutine. Specify a label after the SUBR command - the label is case sensitive, and should start with a letter. If this instruction is hit during normal program flow, it works as a STOP instruction. See GSUB and RETN.",
    "sources": [
      "cdn://caos.html#SUBR"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "SUBS": {
    "returns": "string",
    "kinds": [
      "reporter"
    ],
    "description": "SUBS (string) value (string) start (integer) count (integer) Slices up a string, returning the substring starting at position start, with length count. String indices begin at 1.",
    "sources": [
      "cdn://caos.html#SUBS"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "SUBV": {
    "args": [
      "variable",
      "decimal"
    ],
    "kinds": [
      "command"
    ],
    "description": "SUBV (command) var (variable) sub (decimal) Subtracts an integer or float from a variable, so var = var - sub.",
    "sources": [
      "cdn://caos.html#SUBV"
    ],
    "validation": {
      "arity": 2,
      "types": [
        "variable",
        "decimal"
      ]
    }
  },
  "SVEL": {
    "args": [
      "float"
    ],
    "returns": "float",
    "kinds": [
      "command",
      "reporter"
    ],
    "description": "SVEL (float) Get current sideways velocity.",
    "sources": [
      "cdn://caos.html#SVEL"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "float"
      ]
    }
  },
  "SWAY SHOU": {
    "args": [
      "integer",
      "float",
      "integer",
      "float",
      "integer",
      "float",
      "integer",
      "float"
    ],
    "kinds": [
      "command"
    ],
    "description": "SWAY SHOU (command) drive (integer) adjust (float) drive (integer) adjust (float) drive (integer) adjust (float) drive (integer) adjust (float) Stimulate all creatures that can hear OWNR to adjust four drives by the given amounts.",
    "validation": {
      "arity": 8,
      "types": [
        "integer",
        "float",
        "integer",
        "float",
        "integer",
        "float",
        "integer",
        "float"
      ]
    }
  },
  "SWAY SIGN": {
    "args": [
      "integer",
      "float",
      "integer",
      "float",
      "integer",
      "float",
      "integer",
      "float"
    ],
    "kinds": [
      "command"
    ],
    "description": "SWAY SIGN (command) drive (integer) adjust (float) drive (integer) adjust (float) drive (integer) adjust (float) drive (integer) adjust (float) Stimulate all creatures that can see OWNR to adjust four drives by the given amounts.",
    "validation": {
      "arity": 8,
      "types": [
        "integer",
        "float",
        "integer",
        "float",
        "integer",
        "float",
        "integer",
        "float"
      ]
    }
  },
  "SWAY TACT": {
    "args": [
      "integer",
      "float",
      "integer",
      "float",
      "integer",
      "float",
      "integer",
      "float"
    ],
    "kinds": [
      "command"
    ],
    "description": "SWAY TACT (command) drive (integer) adjust (float) drive (integer) adjust (float) drive (integer) adjust (float) drive (integer) adjust (float) Stimulate all creatures that are touching OWNR to adjust four drives by the given amounts.",
    "validation": {
      "arity": 8,
      "types": [
        "integer",
        "float",
        "integer",
        "float",
        "integer",
        "float",
        "integer",
        "float"
      ]
    }
  },
  "SWAY WRIT": {
    "args": [
      "agent",
      "integer",
      "float",
      "integer",
      "float",
      "integer",
      "float",
      "integer",
      "float"
    ],
    "kinds": [
      "command"
    ],
    "description": "SWAY WRIT (command) creature (agent) drive (integer) adjust (float) drive (integer) adjust (float) drive (integer) adjust (float) drive (integer) adjust (float) Stimulate a specific creature to adjust four drives by the given amounts.",
    "validation": {
      "arity": 9,
      "types": [
        "agent",
        "integer",
        "float",
        "integer",
        "float",
        "integer",
        "float",
        "integer",
        "float"
      ]
    }
  },
  "TACK": {
    "returns": "agent",
    "kinds": [
      "reporter"
    ],
    "description": "TACK (agent) Returns the agent currently being DBG: TACKed.",
    "sources": [
      "cdn://caos.html#TACK"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "TAGE": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "TAGE (integer) Returns the age in ticks since the target creature was BORN. Ticking stops when the creature dies - see DEAD.",
    "sources": [
      "cdn://caos.html#TAGE"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "TAN_": {
    "returns": "float",
    "kinds": [
      "reporter"
    ],
    "description": "TAN_ (float) theta (float) Returns tangent of theta. Theta should be in degrees. Watch out for those nasty discontinuities at 90 and 270.",
    "sources": [
      "cdn://caos.html#TAN_"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "TARG": {
    "args": [
      "agent"
    ],
    "returns": "agent",
    "kinds": [
      "command",
      "reporter"
    ],
    "description": "TARG (agent) Returns current target, on whom many commands act.",
    "sources": [
      "cdn://caos.html#TARG"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "agent"
      ]
    }
  },
  "TCOR": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "TCOR (integer) topY (float) bottomY (float) leftX (float) rightX (float) Tests setting the bounding box of the physical core of the object TARG. May be set to smaller (or larger) than the sprite's rectangle. Returns 1 if OK to set (using CORE), 0 if not.",
    "sources": [
      "cdn://caos.html#TCOR"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "TICK": {
    "args": [
      "rate (int)"
    ],
    "returns": "int",
    "description": "Set or get target\u2019s timer tick rate (ticks between Timer events)",
    "notes": "TICK 0 stops the agent\u2019s timer; reading TICK gives current interval in ticks",
    "kinds": [
      "command",
      "reporter"
    ],
    "sources": [
      "cdn://caos.html#TICK"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "rate (int)"
      ]
    }
  },
  "TIME": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "TIME (integer) Returns the time of day. This can be0 - dawn1 - morning2 - afternoon3 - evening4 - nightThe GAME variable engine_LengthOfDayInMinutes sets the day length. See also HIST TIME.",
    "sources": [
      "cdn://caos.html#TIME"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "TINO": {
    "args": [
      "integer",
      "integer",
      "integer",
      "integer",
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "TINO (command) red_tint (integer) green_tint (integer) blue_tint (integer) rotation (integer) swap (integer) Like TINT but only tints the current frame. The other frames are no longer available in the gallery, it becomes a one frame sprite file. Original display engine only.",
    "sources": [
      "cdn://caos.html#TINO"
    ],
    "validation": {
      "arity": 5,
      "types": [
        "integer",
        "integer",
        "integer",
        "integer",
        "integer"
      ]
    }
  },
  "TINT": {
    "args": [
      "integer",
      "integer",
      "integer",
      "integer",
      "integer"
    ],
    "returns": "integer",
    "kinds": [
      "command",
      "reporter"
    ],
    "description": "TINT (integer) attribute (integer) Returns a tint value for an agent - currently it works only on Skeletal Creatures. Attribute can be:1 - Red2 - Green3 - Blue4 - Rotation5 - Swap",
    "sources": [
      "cdn://caos.html#TINT"
    ],
    "validation": {
      "arity": 5,
      "types": [
        "integer",
        "integer",
        "integer",
        "integer",
        "integer"
      ]
    }
  },
  "TMVB": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "TMVB (integer) delta_x (float) delta_y (float) Similar to TMVT only tests a MVBY.",
    "sources": [
      "cdn://caos.html#TMVB"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "TMVF": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "TMVF (integer) x (float) y (float) Test if a creature could move it's down foot to position x,y.",
    "sources": [
      "cdn://caos.html#TMVF"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "TMVT": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "TMVT (integer) x (float) y (float) Test if target can move to the given location and still lie validly within the room system. Returns 1 if it can, 0 if it can't.",
    "sources": [
      "cdn://caos.html#TMVT"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "TNTW": {
    "args": [
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "TNTW (command) index (integer) This tints the TARG agent with the global tint manager at index. Specify the PART first for compound agents. See also TINT.",
    "sources": [
      "cdn://caos.html#TNTW"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "integer"
      ]
    }
  },
  "TORX": {
    "returns": "float",
    "kinds": [
      "reporter"
    ],
    "description": "TORX (float) room_id (integer) Returns relative X position of the centre of the given room from target's top left corner.",
    "sources": [
      "cdn://caos.html#TORX"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "TORY": {
    "returns": "float",
    "kinds": [
      "reporter"
    ],
    "description": "TORY (float) room_id (integer) Returns relative Y position of the centre of the given room from target's top left corner.",
    "sources": [
      "cdn://caos.html#TORY"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "TOTL": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "TOTL (integer) family (integer) genus (integer) species (integer) Counts the number of agents in the world matching the classifier.",
    "sources": [
      "cdn://caos.html#TOTL"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "TOUC": {
    "returns": "integer",
    "kinds": [
      "command",
      "reporter"
    ],
    "description": "TOUC (command) Make creature reach out to touch the IT agent. Blocks the script until the creature either reaches the agent, or it's fully stretched and still can't.",
    "sources": [
      "cdn://caos.html#TOUC"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "TRAN": {
    "args": [
      "integer",
      "integer"
    ],
    "returns": "integer",
    "kinds": [
      "command",
      "reporter"
    ],
    "description": "TRAN (integer) xpos (integer) ypos (integer) Test for a transparent pixel, returns 1 if the given x y position coincides with a transparent pixel on the TARG agent, otherwise it will return 0. This does not work for creatures.",
    "sources": [
      "cdn://caos.html#TRAN"
    ],
    "validation": {
      "arity": 2,
      "types": [
        "integer",
        "integer"
      ]
    }
  },
  "TRCK": {
    "args": [
      "agent",
      "integer",
      "integer",
      "integer",
      "integer"
    ],
    "returns": "agent",
    "kinds": [
      "command",
      "reporter"
    ],
    "description": "TRCK (agent) Returns the agent being tracked by the camera, if any.",
    "sources": [
      "cdn://caos.html#TRCK"
    ],
    "validation": {
      "arity": 5,
      "types": [
        "agent",
        "integer",
        "integer",
        "integer",
        "integer"
      ]
    }
  },
  "TTAR": {
    "args": [
      "integer",
      "integer",
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "TTAR (command) family (integer) genus (integer) species (integer) Randomly chooses an agent which matches the given classifier and is touching the owner of the script. It then sets TARG to that agent. See ETCH.",
    "sources": [
      "cdn://caos.html#TTAR"
    ],
    "validation": {
      "arity": 3,
      "types": [
        "integer",
        "integer",
        "integer"
      ]
    }
  },
  "TWIN": {
    "returns": "agent",
    "kinds": [
      "reporter"
    ],
    "description": "TWIN (agent) original (agent) agent_null (integer) Clones an agent, and returns the replica. If agent_null is set to 1 the agents that this agent points to (in OVxx, or VAxx in its running script) are set to NULL in the clone. If agent_null is 0, then the clone points to the same agents as the original. When using agent_null 1, you might want to call STPT first so variables being used mid-script aren't cleared under the agent's nose.",
    "sources": [
      "cdn://caos.html#TWIN"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "TYPE": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "TYPE (integer) something (anything) Determines the type of a variable. The type is one of the following:0 - integer1 - floating-point2 - string3 - simple agent4 - pointer agent5 - compound agent6 - vehicle7 - creatureERROR codes for agents:-1 - NULL agent handle-2 - Unknown agent - you should never get this",
    "sources": [
      "cdn://caos.html#TYPE"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "UCLN": {
    "kinds": [
      "command"
    ],
    "description": "UCLN (command) Make sure that an agent isn't cloned anymore, this releases the memory taken up by TINTing it. Agents are usually cloned for purposes such as tinting. Don't forget to set the relevant PART number for compound agents.",
    "sources": [
      "cdn://caos.html#UCLN"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "UFOS": {
    "returns": "string",
    "kinds": [
      "reporter"
    ],
    "description": "UFOS (string) This returns the equivalent of \"uname -a\" on compatible systems, or a description of your operating system on others. This is a descriptive string and should not be taken as fixed format, or parseable.",
    "sources": [
      "cdn://caos.html#UFOS"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "UFTX": {
    "returns": "float",
    "kinds": [
      "reporter"
    ],
    "description": "UFTX (float) Returns X coordinate of creature's up foot.",
    "sources": [
      "cdn://caos.html#UFTX"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "UFTY": {
    "returns": "float",
    "kinds": [
      "reporter"
    ],
    "description": "UFTY (float) Returns Y coordinate of creature's up foot.",
    "sources": [
      "cdn://caos.html#UFTY"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "UNCS": {
    "args": [
      "integer"
    ],
    "returns": "integer",
    "kinds": [
      "command",
      "reporter"
    ],
    "description": "UNCS (integer) Returns 1 if the creature is unconscious, 0 otherwise.",
    "sources": [
      "cdn://caos.html#UNCS"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "integer"
      ]
    }
  },
  "UNID": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "UNID (integer) Returns unique identifier for target agent. AGNT goes the opposite way. NOTE: This should only be used for external programs to persistently refer to an agent for a session. Variables can use SETA to store agent r-values directly for internal use. The unique identifier of an agent can change if you save a world and load it in again.",
    "sources": [
      "cdn://caos.html#UNID"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "UNLK": {
    "kinds": [
      "command"
    ],
    "description": "UNLK (command) End the LOCK section.",
    "sources": [
      "cdn://caos.html#UNLK"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "UNTL": {
    "args": [
      "condition"
    ],
    "kinds": [
      "command"
    ],
    "description": "UNTL (command) condition (condition) Forms the end of a LOOP..UNTL loop. The loop will execute until the condition is met. See DOIF for information on the form of the condition.",
    "sources": [
      "cdn://caos.html#UNTL"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "condition"
      ]
    }
  },
  "UPPA": {
    "returns": "string",
    "kinds": [
      "reporter"
    ],
    "description": "UPPA (string) any_old (string) Converts the given string into all upper case letters.",
    "sources": [
      "cdn://caos.html#UPPA"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "URGE SHOU": {
    "args": [
      "float",
      "integer",
      "float"
    ],
    "kinds": [
      "command"
    ],
    "description": "URGE SHOU (command) noun_stim (float) verb_id (integer) verb_stim (float) Urge all creatures who can hear OWNR to perform the verb_id action on OWNR. Stimuli can range from -1 to 1, ranging from discourage to encourage.",
    "validation": {
      "arity": 3,
      "types": [
        "float",
        "integer",
        "float"
      ]
    }
  },
  "URGE SIGN": {
    "args": [
      "float",
      "integer",
      "float"
    ],
    "kinds": [
      "command"
    ],
    "description": "URGE SIGN (command) noun_stim (float) verb_id (integer) verb_stim (float) Urge all creatures who can see OWNR to perform an action on OWNR.",
    "validation": {
      "arity": 3,
      "types": [
        "float",
        "integer",
        "float"
      ]
    }
  },
  "URGE TACT": {
    "args": [
      "float",
      "integer",
      "float"
    ],
    "kinds": [
      "command"
    ],
    "description": "URGE TACT (command) noun_stim (float) verb_id (integer) verb_stim (float) Urge all creatures who are touching OWNR to perform an action on OWNR.",
    "validation": {
      "arity": 3,
      "types": [
        "float",
        "integer",
        "float"
      ]
    }
  },
  "URGE WRIT": {
    "args": [
      "agent",
      "integer",
      "float",
      "integer",
      "float"
    ],
    "kinds": [
      "command"
    ],
    "description": "URGE WRIT (command) creature (agent) noun_id (integer) noun_stim (float) verb_id (integer) verb_stim (float) Urge a specific creature to perform a specific action on a specific noun. A stimulus greater than 1 will force the Creature to perform an action, or to set its attention (mind control!). Use an id -1 and stim greater than 1 to unforce it.",
    "validation": {
      "arity": 5,
      "types": [
        "agent",
        "integer",
        "float",
        "integer",
        "float"
      ]
    }
  },
  "VARC": {
    "args": [
      "float"
    ],
    "returns": "float",
    "kinds": [
      "command",
      "reporter"
    ],
    "description": "VARC (float) [not implemented yet]",
    "sources": [
      "cdn://caos.html#VARC"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "float"
      ]
    }
  },
  "VAXX": {
    "returns": "variable",
    "kinds": [
      "reporter"
    ],
    "description": "VAxx (variable) VA00 to VA99 are local variables, whose values are lost when the current script ends.",
    "sources": [
      "cdn://caos.html#VAxx"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "VECX": {
    "returns": "float",
    "kinds": [
      "reporter"
    ],
    "description": "VECX (float) angle (float) Returns a normalised vector for the given angle (X coordinate).",
    "sources": [
      "cdn://caos.html#VECX"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "VECY": {
    "returns": "float",
    "kinds": [
      "reporter"
    ],
    "description": "VECY (float) angle (float) Returns a normalised vector for the given angle (Y coordinate).",
    "sources": [
      "cdn://caos.html#VECY"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "VELO": {
    "args": [
      "float",
      "float"
    ],
    "kinds": [
      "command"
    ],
    "description": "VELO (command) x_velocity (float) y_velocity (float) Set velocity, measured in pixels per tick.",
    "sources": [
      "cdn://caos.html#VELO"
    ],
    "validation": {
      "arity": 2,
      "types": [
        "float",
        "float"
      ]
    }
  },
  "VELX": {
    "args": [],
    "returns": "float",
    "description": "Horizontal velocity of target (px/tick)",
    "notes": "Read-only register (use VELO or FVEL/SVEL to set velocities)",
    "kinds": [
      "reporter"
    ],
    "sources": [
      "cdn://caos.html#VELX"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "VELY": {
    "args": [],
    "returns": "float",
    "description": "Vertical velocity of target (px/tick)",
    "notes": "Read-only; positive typically means downward movement (depending on coordinate system)",
    "kinds": [
      "reporter"
    ],
    "sources": [
      "cdn://caos.html#VELY"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "VISI": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "VISI (integer) checkAllCameras (integer) Checks if the agent, or any of its parts, is on screen and returns 1 if it is or 0 if it is not. Set to 0 to check if the agent is on the main camera. Set to 1 to check if the agent is on the main camera or any remote cameras",
    "sources": [
      "cdn://caos.html#VISI"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "VMJR": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "VMJR (integer) Returns the major version number of the engine.",
    "sources": [
      "cdn://caos.html#VMJR"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "VMNR": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "VMNR (integer) Returns the minor version number of the engine.",
    "sources": [
      "cdn://caos.html#VMNR"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "VOCB": {
    "kinds": [
      "command"
    ],
    "description": "VOCB (command) Learn all vocabulary instantly.",
    "sources": [
      "cdn://caos.html#VOCB"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "VOIC": {
    "args": [
      "integer",
      "integer",
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "VOIC (command) genus (integer) gender (integer) age (integer) This sets the TARG agent's voice to the specified creature voice, using standard cascade techniques to select the nearest match. On failure, \"DefaultVoice\" will be reloaded. Use SEZZ to actually say something.",
    "sources": [
      "cdn://caos.html#VOIC"
    ],
    "validation": {
      "arity": 3,
      "types": [
        "integer",
        "integer",
        "integer"
      ]
    }
  },
  "VOIS": {
    "args": [
      "string"
    ],
    "returns": "string",
    "kinds": [
      "command",
      "reporter"
    ],
    "description": "VOIS (string) This returns the voice name for the TARG agent. (Unless it has been serialised in :( In which case it returns \"Lozenged\" if the agent had a voice before the save, or \"\" as normal if the agent can't speak.)",
    "sources": [
      "cdn://caos.html#VOIS"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "string"
      ]
    }
  },
  "VOLM": {
    "args": [
      "integer",
      "integer"
    ],
    "returns": "integer",
    "kinds": [
      "command",
      "reporter"
    ],
    "description": "VOLM (integer) channel (integer) Returns the overall the volume of the sound effects (channel 0), the MIDI (channel 1) or the generated music (channel 2). Values range from -10000 (silent) to 0 (loudest).",
    "sources": [
      "cdn://caos.html#VOLM"
    ],
    "validation": {
      "arity": 2,
      "types": [
        "integer",
        "integer"
      ]
    }
  },
  "VTOS": {
    "returns": "string",
    "kinds": [
      "reporter"
    ],
    "description": "VTOS (string) value (decimal) Converts an integer or float into a string in decimal.",
    "sources": [
      "cdn://caos.html#VTOS"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "WAIT": {
    "args": [
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "WAIT (command) ticks (integer) Block the script for the specified number of ticks. This command does an implicit SLOW.",
    "sources": [
      "cdn://caos.html#WAIT"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "integer"
      ]
    }
  },
  "WALK": {
    "kinds": [
      "command"
    ],
    "description": "WALK (command) Sets creature walking indefinitely. Chooses a walking gait according to chemo-receptors. Always means ignore IT and walk in the current direction set by DIRN.",
    "sources": [
      "cdn://caos.html#WALK"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "WALL": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "WALL (integer) Returns the direction of the last wall the agent collided with. Directions are LEFT, RGHT, _UP_, or DOWN.",
    "sources": [
      "cdn://caos.html#WALL"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "WDOW": {
    "returns": "integer",
    "kinds": [
      "command",
      "reporter"
    ],
    "description": "WDOW (command) Toggle full screen mode.",
    "sources": [
      "cdn://caos.html#WDOW"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "WDTH": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "WDTH (integer) Returns the width of target.",
    "sources": [
      "cdn://caos.html#WDTH"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "WEAR": {
    "args": [
      "integer",
      "integer",
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "WEAR (command) body_id (integer) set_number (integer) layer (integer) Sets a layer of clothing on part of the creature. The set_number is the type of clothing to put on from the overlay file - think of it as an outfit number. layer 0 is the actual body of the creature, so unless you want to replace the body part itself use a higher layer. Higher layers are on top of lower ones. e.g. 0 for a face, 1 for measels spots, 2 for a fencing mask. See also BODY and NUDE.",
    "sources": [
      "cdn://caos.html#WEAR"
    ],
    "validation": {
      "arity": 3,
      "types": [
        "integer",
        "integer",
        "integer"
      ]
    }
  },
  "WEBB": {
    "args": [
      "string"
    ],
    "kinds": [
      "command"
    ],
    "description": "WEBB (command) http_url (string) Launches an external URL in the user's browser. The game engine adds http:// at the beginning to prevent malicious launching of programs, so you just need to specify the domain name and path.",
    "sources": [
      "cdn://caos.html#WEBB"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "string"
      ]
    }
  },
  "WILD": {
    "returns": "string",
    "kinds": [
      "reporter"
    ],
    "description": "WILD (string) family (integer) genus (integer) species (integer) tag_stub (string) offset (integer) Searches for a catalogue tag based on the given classifier, and returns the string at the given offset. See also READ. As an example, with a tag_stub of \"Agent Help\" and a classifier 3 7 11 it would first look for the tag \"Agent Help 3 7 11\". If that wasn't present, it would go through the wildcards, eventually trying \"Agent Help 0 0 0\", and throwing an error if even that isn't there.",
    "sources": [
      "cdn://caos.html#WILD"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "WNAM": {
    "returns": "string",
    "kinds": [
      "reporter"
    ],
    "description": "WNAM (string) Returns the name of the currently loaded world.",
    "sources": [
      "cdn://caos.html#WNAM"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "WNDB": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "WNDB (integer) Returns world coordinates of bottom of current camera window.",
    "sources": [
      "cdn://caos.html#WNDB"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "WNDH": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "WNDH (integer) Returns height of current camera window.",
    "sources": [
      "cdn://caos.html#WNDH"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "WNDL": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "WNDL (integer) Returns world coordinates of left of current camera window.",
    "sources": [
      "cdn://caos.html#WNDL"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "WNDR": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "WNDR (integer) Returns world coordinates of right of current camera window.",
    "sources": [
      "cdn://caos.html#WNDR"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "WNDT": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "WNDT (integer) Returns world coordinates of top of current camera window.",
    "sources": [
      "cdn://caos.html#WNDT"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "WNDW": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "WNDW (integer) Returns width of current camera window.",
    "sources": [
      "cdn://caos.html#WNDW"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "WNTI": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "WNTI (integer) world (string) This returns the index of the world. If you pass in a world name which is not within the system, -1 is returned.",
    "sources": [
      "cdn://caos.html#WNTI"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "WOLF": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "WOLF (integer) kanga_mask (integer) eeyore_mask (integer) Provides various functions to distort space-time and otherwise help with wolfing runs. Set an AND and an EOR mask, to control the following bits:1 - Display rendering. Turning it off speeds the game up.2 - Fastest ticks. The game usually runs at a maximum of 20 frames per second. If this is set, it instead runs as fast as it can.4 - Refresh display at end of tick. If set, then the display is updated at the end of the tick, and the flag is cleared.8 - Autokill. If set, agents which generate run errors are automatically killed, as the com",
    "sources": [
      "cdn://caos.html#WOLF"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "WPAU": {
    "args": [
      "integer"
    ],
    "returns": "integer",
    "kinds": [
      "command",
      "reporter"
    ],
    "description": "WPAU (integer) Returns 1 if world ticks are paused, or 0 otherwise.",
    "sources": [
      "cdn://caos.html#WPAU"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "integer"
      ]
    }
  },
  "WRLD": {
    "args": [
      "string"
    ],
    "returns": "string",
    "kinds": [
      "command",
      "reporter"
    ],
    "description": "WRLD (command) world_name (string) Creates a new world directory for the specified world.",
    "sources": [
      "cdn://caos.html#WRLD"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "string"
      ]
    }
  },
  "WTIK": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "WTIK (integer) Returns the number of ticks since the world was first made. For debugging purposes only you can change this value with DBG: WTIK.",
    "sources": [
      "cdn://caos.html#WTIK"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "WTNT": {
    "args": [
      "integer",
      "integer",
      "integer",
      "integer",
      "integer",
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "WTNT (command) index (integer) red_tint (integer) green_tint (integer) blue_tint (integer) rotation (integer) swap (integer) This sets up the world (global) tint table. The index is the number associated with the tint table - (keep it small please) and the r,g,b is the tint level. Rotation and Swap work as for pigment bleed genes.",
    "sources": [
      "cdn://caos.html#WTNT"
    ],
    "validation": {
      "arity": 6,
      "types": [
        "integer",
        "integer",
        "integer",
        "integer",
        "integer",
        "integer"
      ]
    }
  },
  "WUID": {
    "returns": "string",
    "kinds": [
      "reporter"
    ],
    "description": "WUID (string) Returns the unique identifier of the currently loaded world.",
    "sources": [
      "cdn://caos.html#WUID"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "YEAR": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "YEAR (integer) Returns the number of game years elapsed. The GAME variable engine_NumberOfSeasons sets the year length. See also HIST YEAR.",
    "sources": [
      "cdn://caos.html#YEAR"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "ZOMB": {
    "args": [
      "integer"
    ],
    "returns": "integer",
    "kinds": [
      "command",
      "reporter"
    ],
    "description": "ZOMB (integer) Returns 1 if the creature is zombified (has its brain to motor link severed), 0 otherwise.",
    "sources": [
      "cdn://caos.html#ZOMB"
    ],
    "validation": {
      "arity": 1,
      "types": [
        "integer"
      ]
    }
  },
  "ZOOM": {
    "args": [
      "integer",
      "integer",
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "ZOOM (command) pixels (integer) x (integer) y (integer) Zoom in on the specified position by a negative amount of pixels or out by positive amount of pixels. If you send -1 as the x and y coordinates then the camera zooms in on the exising view port centre. This only applies to remote cameras.",
    "sources": [
      "cdn://caos.html#ZOOM"
    ],
    "validation": {
      "arity": 3,
      "types": [
        "integer",
        "integer",
        "integer"
      ]
    }
  },
  "_CD_ EJCT": {
    "kinds": [
      "command"
    ],
    "description": "_CD_ EJCT (command) Open the CD tray.",
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "_CD_ FRQH": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "_CD_ FRQH (integer) Returns the average value for the highest frequencies detected in the CD player for the current tick.",
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "_CD_ FRQL": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "_CD_ FRQL (integer) Returns the average value for the lowest frequencies detected in the CD player for the current tick.",
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "_CD_ FRQM": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "_CD_ FRQM (integer) Returns the average value for the medium frequencies detected in the CD player for the current tick.",
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "_CD_ INIT": {
    "kinds": [
      "command"
    ],
    "description": "_CD_ INIT (command) Let the game know that you wish to use the cd player. This will shut down all in game sounds and music as the mixer is needed to gauge the frequency spectrum.",
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "_CD_ PAWS": {
    "args": [
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "_CD_ PAWS (command) on_off (integer) Pause the CD player if the parameter is greater than zero, to continue playing a previous paused track set the parameter to 1.",
    "validation": {
      "arity": 1,
      "types": [
        "integer"
      ]
    }
  },
  "_CD_ PLAY": {
    "args": [
      "integer",
      "integer"
    ],
    "kinds": [
      "command"
    ],
    "description": "_CD_ PLAY (command) first_track (integer) last_track (integer) Tell the CD Player to play the given track.",
    "validation": {
      "arity": 2,
      "types": [
        "integer",
        "integer"
      ]
    }
  },
  "_CD_ SHUT": {
    "kinds": [
      "command"
    ],
    "description": "_CD_ SHUT (command) Tell the game that you have finished with the cd player. This will reinstate the in game sounds and music.",
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "_CD_ STOP": {
    "kinds": [
      "command"
    ],
    "description": "_CD_ STOP (command) Stop the cd player.",
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "_IT_": {
    "returns": "agent",
    "kinds": [
      "reporter"
    ],
    "description": "_IT_ (agent) Returns the agent OWNR's attention was on when the current script was entered. This is only valid if OWNR is a creature. Compare IITT.",
    "sources": [
      "cdn://caos.html#_IT_"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "_P1_": {
    "returns": "variable",
    "kinds": [
      "reporter"
    ],
    "description": "_P1_ (variable) Returns the first parameter sent to a script.",
    "sources": [
      "cdn://caos.html#_P1_"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "_P2_": {
    "returns": "variable",
    "kinds": [
      "reporter"
    ],
    "description": "_P2_ (variable) Returns the second parameter sent to a script.",
    "sources": [
      "cdn://caos.html#_P2_"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "_UP_": {
    "returns": "integer",
    "kinds": [
      "reporter"
    ],
    "description": "_UP_ (integer) Returns the value of the up constant. Attribute Flags Number (for ATTR) Name Description 1 Carryable Can be picked up by things other than creatures, vehicles and the pointer. 2 Mouseable Can be picked up by the mouse. 4 Activateable Can be activated using the mouse - otherwise CLAC and CLIK style events don't get sent when you click on the agent. 8 Greedy Cabin When set on a vehicle, it will automatically pick up things dropped in its cabin. 16 Invisible Creatures don't see you - applies to ESEE and STAR on creatures, as well as internal creature code. 32 Floatable Agent floats",
    "sources": [
      "cdn://caos.html#_UP_"
    ],
    "validation": {
      "arity": 0,
      "types": []
    }
  },
  "DIFF": {
    "args": [
      "var0 (number)",
      "var1 (number)"
    ],
    "returns": "float",
    "description": "Return difference between two numbers (var0 - var1)",
    "notes": "Useful for simple arithmetic comparisons (basic arithmetic).",
    "validation": {
      "arity": 2,
      "types": [
        "var0 (number)",
        "var1 (number)"
      ]
    }
  },
  "...": {
    "args": [],
    "returns": null,
    "description": "/* All other opcodes would be enumerated similarly, each with args, return, and notes */",
    "notes": "For brevity, only a subset is shown here. **Total commands covered:** 554 as per C3/DS engine spec.",
    "validation": {
      "arity": 0,
      "types": []
    }
  }
}